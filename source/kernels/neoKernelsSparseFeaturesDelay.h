// ----------------------------------------------------------------------------
//  OgmaNeo
//  Copyright(c) 2016 Ogma Intelligent Systems Corp. All rights reserved.
//
//  This copy of OgmaNeo is licensed to you under the terms described
//  in the OGMANEO_LICENSE.md file included in this distribution.
// ----------------------------------------------------------------------------

#pragma once

#if !defined(_NEOKERNELSSPARSEFEATURESDELAY_OCL_HEADER)
#define _NEOKERNELSSPARSEFEATURESDELAY_OCL_HEADER

#include <string>

const std::string neoKernelsSparseFeaturesDelay_ocl[] = {
"// ----------------------------------------------------------------------------\n",
"//  OgmaNeo\n",
"//  Copyright(c) 2016 Ogma Intelligent Systems Corp. All rights reserved.\n",
"//\n",
"//  This copy of OgmaNeo is licensed to you under the terms described\n",
"//  in the OGMANEO_LICENSE.md file included in this distribution.\n",
"// ----------------------------------------------------------------------------\n",
"\n",
"// ----------------------------------------- Samplers -----------------------------------------\n",
"\n",
"constant sampler_t defaultSampler = CLK_NORMALIZED_COORDS_FALSE |\n",
"    CLK_ADDRESS_CLAMP_TO_EDGE |\n",
"    CLK_FILTER_NEAREST;\n",
"\n",
"constant sampler_t normalizedClampedNearestSampler = CLK_NORMALIZED_COORDS_TRUE |\n",
"    CLK_ADDRESS_CLAMP |\n",
"    CLK_FILTER_NEAREST;\n",
"\n",
"constant sampler_t normalizedClampedToEdgeNearestSampler = CLK_NORMALIZED_COORDS_TRUE |\n",
"    CLK_ADDRESS_CLAMP_TO_EDGE |\n",
"    CLK_FILTER_NEAREST;\n",
"\n",
"constant sampler_t unnormalizedClampedNearestSampler = CLK_NORMALIZED_COORDS_FALSE |\n",
"    CLK_ADDRESS_CLAMP |\n",
"    CLK_FILTER_NEAREST;\n",
"\n",
"constant sampler_t defaultNormalizedSampler = CLK_NORMALIZED_COORDS_TRUE |\n",
"    CLK_ADDRESS_CLAMP_TO_EDGE |\n",
"    CLK_FILTER_NEAREST;\n",
"\n",
"constant sampler_t defaultUnnormalizedSampler = CLK_NORMALIZED_COORDS_FALSE |\n",
"    CLK_ADDRESS_CLAMP_TO_EDGE |\n",
"    CLK_FILTER_NEAREST;\n",
"\n",
"// ----------------------------------------- Common -----------------------------------------\n",
"\n",
"float randFloat(uint2* state) {\n",
"    const float invMaxInt = 1.0f / 4294967296.0f;\n",
"    uint x = (*state).x * 17 + (*state).y * 13123;\n",
"    (*state).x = (x << 13) ^ x;\n",
"    (*state).y ^= (x << 7);\n",
"\n",
"    uint tmp = x * (x * x * 15731 + 74323) + 871483;\n",
"\n",
"    return convert_float(tmp) * invMaxInt;\n",
"}\n",
"\n",
"float randNormal(uint2* state) {\n",
"    float u1 = randFloat(state);\n",
"    float u2 = randFloat(state);\n",
"\n",
"    return sqrt(-2.0f * log(u1)) * cos(6.28318f * u2);\n",
"}\n",
"\n",
"float sigmoid(float x) {\n",
"    return 1.0f / (1.0f + exp(-x));\n",
"}\n",
"\n",
"float relu(float x, float leak) {\n",
"    x += 0.5f;\n",
"\n",
"    if (x > 1.0f)\n",
"        return 1.0f + (x - 1.0f) * leak;\n",
"\n",
"    return x > 0.0f ? x : x * leak;\n",
"}\n",
"\n",
"float relud(float x, float leak) {\n",
"    x += 0.5f;\n",
"\n",
"    return x > 0.0f && x < 1.0f ? 1.0f : leak;\n",
"}\n",
"\n",
"bool inBounds0(int2 position, int2 upperBound) {\n",
"    return position.x >= 0 && position.x < upperBound.x && position.y >= 0 && position.y < upperBound.y;\n",
"}\n",
"\n",
"bool inBounds(int2 position, int2 lowerBound, int2 upperBound) {\n",
"    return position.x >= lowerBound.x && position.x < upperBound.x && position.y >= lowerBound.y && position.y < upperBound.y;\n",
"}\n",
"\n",
"int2 project(int2 position, float2 toScalars) {\n",
"    return (int2)(position.x * toScalars.x + 0.5f, position.y * toScalars.y + 0.5f);\n",
"}\n",
"\n",
"// Initialize a random uniform 2D image (X field)\n",
"void kernel randomUniform2D(write_only image2d_t values, uint2 seed, float2 minMax) {\n",
"    uint2 seedValue = seed + (uint2)(get_global_id(0) * 29 + 12, get_global_id(1) * 16 + 23) * 36;\n",
"\n",
"    int2 position = (int2)(get_global_id(0), get_global_id(1));\n",
"\n",
"    float value = randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x;\n",
"\n",
"    write_imagef(values, position, (float4)(value, 0.0f, 0.0f, 0.0f));\n",
"}\n",
"\n",
"// Initialize a random uniform 3D image (X field)\n",
"void kernel randomUniform3D(write_only image3d_t values, uint2 seed, float2 minMax) {\n",
"    uint2 seedValue = seed + (uint2)(get_global_id(0) * 12 + 76 + get_global_id(2) * 3, get_global_id(1) * 21 + 42 + get_global_id(2) * 7) * 12;\n",
"\n",
"    int3 position = (int3)(get_global_id(0), get_global_id(1), get_global_id(2));\n",
"\n",
"    float value = randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x;\n",
"\n",
"    write_imagef(values, (int4)(position, 0), (float4)(value, 0.0f, 0.0f, 0.0f));\n",
"}\n",
"\n",
"// Initialize a random uniform 2D image (XY fields)\n",
"void kernel randomUniform2DXY(write_only image2d_t values, uint2 seed, float2 minMax) {\n",
"    uint2 seedValue = seed + (uint2)(get_global_id(0) * 15 + 66, get_global_id(1) * 61 + 2) * 56;\n",
"\n",
"    int2 position = (int2)(get_global_id(0), get_global_id(1));\n",
"\n",
"    float2 v = (float2)(randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x, randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x);\n",
"\n",
"    write_imagef(values, position, (float4)(v.x, v.y, 0.0f, 0.0f));\n",
"}\n",
"\n",
"// Initialize a random uniform 2D image (XYZ fields)\n",
"void kernel randomUniform2DXYZ(write_only image2d_t values, uint2 seed, float2 minMax) {\n",
"    uint2 seedValue = seed + (uint2)(get_global_id(0) * 15 + 66, get_global_id(1) * 61 + 2) * 56;\n",
"\n",
"    int2 position = (int2)(get_global_id(0), get_global_id(1));\n",
"\n",
"    float3 v = (float3)(randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x, randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x, randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x);\n",
"\n",
"    write_imagef(values, position, (float4)(v.x, v.y, v.z, 0.0f));\n",
"}\n",
"\n",
"// Initialize a random uniform 2D image (XZ fields)\n",
"void kernel randomUniform2DXZ(write_only image2d_t values, uint2 seed, float2 minMax) {\n",
"    uint2 seedValue = seed + (uint2)(get_global_id(0) * 29 + 12, get_global_id(1) * 16 + 23) * 36;\n",
"\n",
"    int2 position = (int2)(get_global_id(0), get_global_id(1));\n",
"\n",
"    float2 v = (float2)(randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x, randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x);\n",
"\n",
"    write_imagef(values, position, (float4)(v.x, 0.0f, v.y, 0.0f));\n",
"}\n",
"\n",
"// Initialize a random uniform 3D image (XY fields)\n",
"void kernel randomUniform3DXY(write_only image3d_t values, uint2 seed, float2 minMax) {\n",
"    uint2 seedValue = seed + (uint2)(get_global_id(0) * 12 + 76 + get_global_id(2) * 3, get_global_id(1) * 21 + 42 + get_global_id(2) * 7) * 12;\n",
"\n",
"    int3 position = (int3)(get_global_id(0), get_global_id(1), get_global_id(2));\n",
"\n",
"    float2 v = (float2)(randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x, randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x);\n",
"\n",
"    write_imagef(values, (int4)(position, 0), (float4)(v.x, v.y, 0.0f, 0.0f));\n",
"}\n",
"\n",
"// Initialize a random uniform 3D image (XZ fields)\n",
"void kernel randomUniform3DXZ(write_only image3d_t values, uint2 seed, float2 minMax) {\n",
"    uint2 seedValue = seed + (uint2)(get_global_id(0) * 12 + 76 + get_global_id(2) * 3, get_global_id(1) * 21 + 42 + get_global_id(2) * 7) * 12;\n",
"\n",
"    int3 position = (int3)(get_global_id(0), get_global_id(1), get_global_id(2));\n",
"\n",
"    float2 v = (float2)(randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x, randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x);\n",
"\n",
"    write_imagef(values, (int4)(position, 0), (float4)(v.x, 0.0f, v.y, 0.0f));\n",
"}\n",
"// ----------------------------------------------------------------------------\n",
"//  OgmaNeo\n",
"//  Copyright(c) 2016 Ogma Intelligent Systems Corp. All rights reserved.\n",
"//\n",
"//  This copy of OgmaNeo is licensed to you under the terms described\n",
"//  in the OGMANEO_LICENSE.md file included in this distribution.\n",
"// ----------------------------------------------------------------------------\n",
"\n",
"// ----------------------------------------- Delay Encoder -----------------------------------------\n",
"\n",
"void kernel sfdStimulus(read_only image2d_t visibleStates,\n",
"    read_only image2d_t hiddenSummationTempBack, write_only image2d_t hiddenSummationTempFront, read_only image3d_t weights,\n",
"    int2 visibleSize, float2 hiddenToVisible, int radius, uchar ignoreMiddle)\n",
"{\n",
"    int2 hiddenPosition = (int2)(get_global_id(0), get_global_id(1));\n",
"    int2 visiblePositionCenter = project(hiddenPosition, hiddenToVisible);\n",
"\n",
"    float sum = read_imagef(hiddenSummationTempBack, defaultSampler, hiddenPosition).x;\n",
"\n",
"    float subSum = 0.0f;\n",
"\n",
"	float stateSum = 0.0f;\n",
"\n",
"    int2 fieldLowerBound = visiblePositionCenter - (int2)(radius);\n",
"\n",
"    for (int dx = -radius; dx <= radius; dx++)\n",
"        for (int dy = -radius; dy <= radius; dy++) {\n",
"            if (ignoreMiddle && dx == 0 && dy == 0)\n",
"                continue;\n",
"\n",
"            int2 visiblePosition = visiblePositionCenter + (int2)(dx, dy);\n",
"\n",
"            if (inBounds0(visiblePosition, visibleSize)) {\n",
"                int2 offset = visiblePosition - fieldLowerBound;\n",
"\n",
"                int wi = offset.y + offset.x * (radius * 2 + 1);\n",
"\n",
"                float weight = read_imagef(weights, defaultSampler, (int4)(hiddenPosition.x, hiddenPosition.y, wi, 0)).x;\n",
"\n",
"                float visibleState = read_imagef(visibleStates, defaultSampler, visiblePosition).x;\n",
"\n",
"                subSum += weight * visibleState;\n",
"				stateSum += visibleState * visibleState;\n",
"            }\n",
"        }\n",
"\n",
"    write_imagef(hiddenSummationTempFront, hiddenPosition, (float4)(sum + subSum / fmax(0.0001f, sqrt(stateSum)), 0.0f, 0.0f, 0.0f));\n",
"}\n",
"\n",
"void kernel sfdActivate(read_only image2d_t stimuli, read_only image2d_t hiddenStates, read_only image2d_t biases,\n",
"    read_only image2d_t hiddenActivationsBack, write_only image2d_t hiddenActivationsFront)\n",
"{\n",
"    int2 hiddenPosition = (int2)(get_global_id(0), get_global_id(1));\n",
"\n",
"    float stimulus = read_imagef(stimuli, defaultSampler, hiddenPosition).x;\n",
"\n",
"    float activationPrev = read_imagef(hiddenActivationsBack, defaultSampler, hiddenPosition).x;\n",
"\n",
"    float statePrev = read_imagef(hiddenStates, defaultSampler, hiddenPosition).x;\n",
"\n",
"    float bias = read_imagef(biases, defaultSampler, hiddenPosition).x;\n",
"\n",
"    float activation = fmax(0.0f, activationPrev * (1.0f - statePrev) + stimulus + bias);\n",
"\n",
"    write_imagef(hiddenActivationsFront, hiddenPosition, (float4)(activation, 0.0f, 0.0f, 0.0f));\n",
"}\n",
"\n",
"void kernel sfdInhibit(read_only image2d_t activations,\n",
"    write_only image2d_t hiddenStatesFront,\n",
"    int2 hiddenSize, int radius, float activeRatio)\n",
"{\n",
"    int2 hiddenPosition = (int2)(get_global_id(0), get_global_id(1));\n",
"\n",
"    float activation = read_imagef(activations, defaultSampler, hiddenPosition).x;\n",
"\n",
"    float inhibition = 0.0f;\n",
"\n",
"    float count = 0.0f;\n",
"\n",
"    for (int dx = -radius; dx <= radius; dx++)\n",
"        for (int dy = -radius; dy <= radius; dy++) {\n",
"            if (dx == 0 && dy == 0)\n",
"                continue;\n",
"\n",
"            int2 otherPosition = hiddenPosition + (int2)(dx, dy);\n",
"\n",
"            if (inBounds0(otherPosition, hiddenSize)) {\n",
"                float otherActivation = read_imagef(activations, defaultSampler, otherPosition).x;\n",
"\n",
"                inhibition += otherActivation >= activation ? 1.0f : 0.0f;\n",
"                count += 1.0f;\n",
"            }\n",
"        }\n",
"\n",
"    float state = inhibition < activeRatio * count ? 1.0f : 0.0f;\n",
"\n",
"    write_imagef(hiddenStatesFront, hiddenPosition, (float4)(state, 0.0f, 0.0f, 0.0f));\n",
"}\n",
"\n",
"void kernel sfdLearnWeights(read_only image2d_t hiddenStates, read_only image2d_t hiddenStatesPrev,\n",
"    read_only image2d_t visibleStates, read_only image2d_t visibleStatesPrev,\n",
"    read_only image3d_t weightsBack, write_only image3d_t weightsFront,\n",
"    int2 visibleSize, float2 hiddenToVisible, int radius, float activeRatio, float weightAlpha, float lambda, float gamma)\n",
"{\n",
"    int2 hiddenPosition = (int2)(get_global_id(0), get_global_id(1));\n",
"    int2 visiblePositionCenter = project(hiddenPosition, hiddenToVisible);\n",
"\n",
"    int2 fieldLowerBound = visiblePositionCenter - (int2)(radius);\n",
"\n",
"    float2 hiddenState = read_imagef(hiddenStates, defaultSampler, hiddenPosition).xy;\n",
"    float2 hiddenStatePrev = read_imagef(hiddenStatesPrev, defaultSampler, hiddenPosition).xy;\n",
"\n",
"	float weightSum = 0.0f;\n",
"\n",
"	for (int dx = -radius; dx <= radius; dx++)\n",
"        for (int dy = -radius; dy <= radius; dy++) {\n",
"            int2 visiblePosition = visiblePositionCenter + (int2)(dx, dy);\n",
"\n",
"            if (inBounds0(visiblePosition, visibleSize)) {\n",
"                int2 offset = visiblePosition - fieldLowerBound;\n",
"\n",
"                int wi = offset.y + offset.x * (radius * 2 + 1);\n",
"\n",
"                float weightPrev = read_imagef(weightsBack, defaultSampler, (int4)(hiddenPosition.x, hiddenPosition.y, wi, 0)).x;\n",
"\n",
"                weightSum += weightPrev * weightPrev;\n",
"            }\n",
"        }\n",
"\n",
"	float scale = 1.0f / fmax(0.0001f, sqrt(weightSum));\n",
"\n",
"    for (int dx = -radius; dx <= radius; dx++)\n",
"        for (int dy = -radius; dy <= radius; dy++) {\n",
"            int2 visiblePosition = visiblePositionCenter + (int2)(dx, dy);\n",
"\n",
"            if (inBounds0(visiblePosition, visibleSize)) {\n",
"                int2 offset = visiblePosition - fieldLowerBound;\n",
"\n",
"                int wi = offset.y + offset.x * (radius * 2 + 1);\n",
"\n",
"                float3 weightPrev = read_imagef(weightsBack, defaultSampler, (int4)(hiddenPosition.x, hiddenPosition.y, wi, 0)).xyz;\n",
"\n",
"                float2 visibleState = read_imagef(visibleStates, defaultSampler, visiblePosition).xy;\n",
"                float2 visibleStatePrev = read_imagef(visibleStatesPrev, defaultSampler, visiblePosition).xy;\n",
"\n",
"                float traceShort = weightPrev.y * lambda + (1.0f - lambda) * hiddenState.x * visibleState.y;\n",
"                float traceLong = weightPrev.z * gamma + (1.0f - gamma) * hiddenState.x * visibleState.y;\n",
"\n",
"                float learn = traceLong - traceShort;\n",
"\n",
"                write_imagef(weightsFront, (int4)(hiddenPosition.x, hiddenPosition.y, wi, 0), (float4)(weightPrev.x * scale + weightAlpha * learn, traceShort, traceLong, 0.0f));\n",
"            }\n",
"        }\n",
"}\n",
"\n",
"void kernel sfdLearnBiases(read_only image2d_t stimuli, read_only image2d_t hiddenStates, read_only image2d_t hiddenBiasesBack, write_only image2d_t hiddenBiasesFront, float activeRatio, float biasAlpha) {\n",
"    int2 hiddenPosition = (int2)(get_global_id(0), get_global_id(1));\n",
"\n",
"    float stimulus = read_imagef(stimuli, defaultSampler, hiddenPosition).x;\n",
"    float hiddenState = read_imagef(hiddenStates, defaultSampler, hiddenPosition).x;\n",
"\n",
"    float hiddenBiasPrev = read_imagef(hiddenBiasesBack, defaultSampler, hiddenPosition).x;\n",
"\n",
"    write_imagef(hiddenBiasesFront, hiddenPosition, (float4)(hiddenBiasPrev + biasAlpha * (-stimulus - hiddenBiasPrev), 0.0f, 0.0f, 0.0f));\n",
"}\n",
"\n",
"void kernel sfdDeriveInputs(read_only image2d_t inputs, write_only image2d_t outputsFront) {\n",
"    int2 position = (int2)(get_global_id(0), get_global_id(1));\n",
"\n",
"    float input = read_imagef(inputs, defaultSampler, position).x;\n",
"\n",
"    write_imagef(outputsFront, position, (float4)(input, 0.0f, 0.0f, 0.0f));\n",
"}\n",
};

#endif
