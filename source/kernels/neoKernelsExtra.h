// ----------------------------------------------------------------------------
//  OgmaNeo
//  Copyright(c) 2016 Ogma Intelligent Systems Corp. All rights reserved.
//
//  This copy of OgmaNeo is licensed to you under the terms described
//  in the OGMANEO_LICENSE.md file included in this distribution.
// ----------------------------------------------------------------------------

#pragma once

#if !defined(_NEOKERNELSEXTRA_OCL_HEADER)
#define _NEOKERNELSEXTRA_OCL_HEADER

#include <string>

const std::string neoKernelsExtra_ocl[] = {
"// ----------------------------------------------------------------------------\n",
"//  OgmaNeo\n",
"//  Copyright(c) 2016 Ogma Intelligent Systems Corp. All rights reserved.\n",
"//\n",
"//  This copy of OgmaNeo is licensed to you under the terms described\n",
"//  in the OGMANEO_LICENSE.md file included in this distribution.\n",
"// ----------------------------------------------------------------------------\n",
"\n",
"// ----------------------------------------- Samplers -----------------------------------------\n",
"\n",
"constant sampler_t defaultSampler = CLK_NORMALIZED_COORDS_FALSE |\n",
"    CLK_ADDRESS_CLAMP_TO_EDGE |\n",
"    CLK_FILTER_NEAREST;\n",
"\n",
"constant sampler_t normalizedClampedNearestSampler = CLK_NORMALIZED_COORDS_TRUE |\n",
"    CLK_ADDRESS_CLAMP |\n",
"    CLK_FILTER_NEAREST;\n",
"\n",
"constant sampler_t normalizedClampedToEdgeNearestSampler = CLK_NORMALIZED_COORDS_TRUE |\n",
"    CLK_ADDRESS_CLAMP_TO_EDGE |\n",
"    CLK_FILTER_NEAREST;\n",
"\n",
"constant sampler_t unnormalizedClampedNearestSampler = CLK_NORMALIZED_COORDS_FALSE |\n",
"    CLK_ADDRESS_CLAMP |\n",
"    CLK_FILTER_NEAREST;\n",
"\n",
"constant sampler_t defaultNormalizedSampler = CLK_NORMALIZED_COORDS_TRUE |\n",
"    CLK_ADDRESS_CLAMP_TO_EDGE |\n",
"    CLK_FILTER_NEAREST;\n",
"\n",
"constant sampler_t defaultUnnormalizedSampler = CLK_NORMALIZED_COORDS_FALSE |\n",
"    CLK_ADDRESS_CLAMP_TO_EDGE |\n",
"    CLK_FILTER_NEAREST;\n",
"\n",
"// ----------------------------------------- Common -----------------------------------------\n",
"\n",
"float randFloat(uint2* state) {\n",
"    const float invMaxInt = 1.0f / 4294967296.0f;\n",
"    uint x = (*state).x * 17 + (*state).y * 13123;\n",
"    (*state).x = (x << 13) ^ x;\n",
"    (*state).y ^= (x << 7);\n",
"\n",
"    uint tmp = x * (x * x * 15731 + 74323) + 871483;\n",
"\n",
"    return convert_float(tmp) * invMaxInt;\n",
"}\n",
"\n",
"float randNormal(uint2* state) {\n",
"    float u1 = randFloat(state);\n",
"    float u2 = randFloat(state);\n",
"\n",
"    return sqrt(-2.0f * log(u1)) * cos(6.28318f * u2);\n",
"}\n",
"\n",
"float sigmoid(float x) {\n",
"    return 1.0f / (1.0f + exp(-x));\n",
"}\n",
"\n",
"float relu(float x, float leak) {\n",
"    x += 0.5f;\n",
"\n",
"    if (x > 1.0f)\n",
"        return 1.0f + (x - 1.0f) * leak;\n",
"\n",
"    return x > 0.0f ? x : x * leak;\n",
"}\n",
"\n",
"float relud(float x, float leak) {\n",
"    x += 0.5f;\n",
"\n",
"    return x > 0.0f && x < 1.0f ? 1.0f : leak;\n",
"}\n",
"\n",
"bool inBounds0(int2 position, int2 upperBound) {\n",
"    return position.x >= 0 && position.x < upperBound.x && position.y >= 0 && position.y < upperBound.y;\n",
"}\n",
"\n",
"bool inBounds(int2 position, int2 lowerBound, int2 upperBound) {\n",
"    return position.x >= lowerBound.x && position.x < upperBound.x && position.y >= lowerBound.y && position.y < upperBound.y;\n",
"}\n",
"\n",
"int2 project(int2 position, float2 toScalars) {\n",
"    return (int2)(position.x * toScalars.x + 0.5f, position.y * toScalars.y + 0.5f);\n",
"}\n",
"\n",
"// Initialize a random uniform 2D image (X field)\n",
"void kernel randomUniform2D(write_only image2d_t values, uint2 seed, float2 minMax) {\n",
"    uint2 seedValue = seed + (uint2)(get_global_id(0) * 29 + 12, get_global_id(1) * 16 + 23) * 36;\n",
"\n",
"    int2 position = (int2)(get_global_id(0), get_global_id(1));\n",
"\n",
"    float value = randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x;\n",
"\n",
"    write_imagef(values, position, (float4)(value, 0.0f, 0.0f, 0.0f));\n",
"}\n",
"\n",
"// Initialize a random uniform 3D image (X field)\n",
"void kernel randomUniform3D(write_only image3d_t values, uint2 seed, float2 minMax) {\n",
"    uint2 seedValue = seed + (uint2)(get_global_id(0) * 12 + 76 + get_global_id(2) * 3, get_global_id(1) * 21 + 42 + get_global_id(2) * 7) * 12;\n",
"\n",
"    int3 position = (int3)(get_global_id(0), get_global_id(1), get_global_id(2));\n",
"\n",
"    float value = randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x;\n",
"\n",
"    write_imagef(values, (int4)(position, 0), (float4)(value, 0.0f, 0.0f, 0.0f));\n",
"}\n",
"\n",
"// Initialize a random uniform 2D image (XY fields)\n",
"void kernel randomUniform2DXY(write_only image2d_t values, uint2 seed, float2 minMax) {\n",
"    uint2 seedValue = seed + (uint2)(get_global_id(0) * 15 + 66, get_global_id(1) * 61 + 2) * 56;\n",
"\n",
"    int2 position = (int2)(get_global_id(0), get_global_id(1));\n",
"\n",
"    float2 v = (float2)(randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x, randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x);\n",
"\n",
"    write_imagef(values, position, (float4)(v.x, v.y, 0.0f, 0.0f));\n",
"}\n",
"\n",
"// Initialize a random uniform 2D image (XYZ fields)\n",
"void kernel randomUniform2DXYZ(write_only image2d_t values, uint2 seed, float2 minMax) {\n",
"    uint2 seedValue = seed + (uint2)(get_global_id(0) * 15 + 66, get_global_id(1) * 61 + 2) * 56;\n",
"\n",
"    int2 position = (int2)(get_global_id(0), get_global_id(1));\n",
"\n",
"    float3 v = (float3)(randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x, randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x, randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x);\n",
"\n",
"    write_imagef(values, position, (float4)(v.x, v.y, v.z, 0.0f));\n",
"}\n",
"\n",
"// Initialize a random uniform 2D image (XZ fields)\n",
"void kernel randomUniform2DXZ(write_only image2d_t values, uint2 seed, float2 minMax) {\n",
"    uint2 seedValue = seed + (uint2)(get_global_id(0) * 29 + 12, get_global_id(1) * 16 + 23) * 36;\n",
"\n",
"    int2 position = (int2)(get_global_id(0), get_global_id(1));\n",
"\n",
"    float2 v = (float2)(randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x, randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x);\n",
"\n",
"    write_imagef(values, position, (float4)(v.x, 0.0f, v.y, 0.0f));\n",
"}\n",
"\n",
"// Initialize a random uniform 3D image (XY fields)\n",
"void kernel randomUniform3DXY(write_only image3d_t values, uint2 seed, float2 minMax) {\n",
"    uint2 seedValue = seed + (uint2)(get_global_id(0) * 12 + 76 + get_global_id(2) * 3, get_global_id(1) * 21 + 42 + get_global_id(2) * 7) * 12;\n",
"\n",
"    int3 position = (int3)(get_global_id(0), get_global_id(1), get_global_id(2));\n",
"\n",
"    float2 v = (float2)(randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x, randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x);\n",
"\n",
"    write_imagef(values, (int4)(position, 0), (float4)(v.x, v.y, 0.0f, 0.0f));\n",
"}\n",
"\n",
"// Initialize a random uniform 3D image (XZ fields)\n",
"void kernel randomUniform3DXZ(write_only image3d_t values, uint2 seed, float2 minMax) {\n",
"    uint2 seedValue = seed + (uint2)(get_global_id(0) * 12 + 76 + get_global_id(2) * 3, get_global_id(1) * 21 + 42 + get_global_id(2) * 7) * 12;\n",
"\n",
"    int3 position = (int3)(get_global_id(0), get_global_id(1), get_global_id(2));\n",
"\n",
"    float2 v = (float2)(randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x, randFloat(&seedValue) * (minMax.y - minMax.x) + minMax.x);\n",
"\n",
"    write_imagef(values, (int4)(position, 0), (float4)(v.x, 0.0f, v.y, 0.0f));\n",
"}\n",
"// ----------------------------------------------------------------------------\n",
"//  OgmaNeo\n",
"//  Copyright(c) 2016 Ogma Intelligent Systems Corp. All rights reserved.\n",
"//\n",
"//  This copy of OgmaNeo is licensed to you under the terms described\n",
"//  in the OGMANEO_LICENSE.md file included in this distribution.\n",
"// ----------------------------------------------------------------------------\n",
"\n",
"// ----------------------------------------- Sparse Coder -----------------------------------------\n",
"\n",
"void kernel scStimulus(read_only image2d_t visibleStates,\n",
"    read_only image2d_t hiddenSummationTempBack, write_only image2d_t hiddenSummationTempFront, read_only image3d_t weights,\n",
"    int2 visibleSize, float2 hiddenToVisible, int radius, uchar ignoreMiddle)\n",
"{\n",
"    int2 hiddenPosition = (int2)(get_global_id(0), get_global_id(1));\n",
"    int2 visiblePositionCenter = (int2)(hiddenPosition.x * hiddenToVisible.x + 0.5f, hiddenPosition.y * hiddenToVisible.y + 0.5f);\n",
"\n",
"    float sum = read_imagef(hiddenSummationTempBack, defaultSampler, hiddenPosition).x;\n",
"\n",
"    float subSum = 0.0f;\n",
"    float count = 0.0f;\n",
"\n",
"    int2 fieldLowerBound = visiblePositionCenter - (int2)(radius);\n",
"\n",
"    for (int dx = -radius; dx <= radius; dx++)\n",
"        for (int dy = -radius; dy <= radius; dy++) {\n",
"            if (ignoreMiddle && dx == 0 && dy == 0)\n",
"                continue;\n",
"\n",
"            int2 visiblePosition = visiblePositionCenter + (int2)(dx, dy);\n",
"\n",
"            if (inBounds0(visiblePosition, visibleSize)) {\n",
"                int2 offset = visiblePosition - fieldLowerBound;\n",
"\n",
"                int wi = offset.y + offset.x * (radius * 2 + 1);\n",
"\n",
"                float weight = read_imagef(weights, defaultSampler, (int4)(hiddenPosition.x, hiddenPosition.y, wi, 0)).x;\n",
"\n",
"                float visibleState = read_imagef(visibleStates, defaultSampler, visiblePosition).x;\n",
"\n",
"                subSum += visibleState * weight;\n",
"                count += 1.0f;\n",
"            }\n",
"        }\n",
"\n",
"    write_imagef(hiddenSummationTempFront, hiddenPosition, (float4)(sum + subSum / fmax(1.0f, count)));\n",
"}\n",
"\n",
"void kernel scReverse(read_only image2d_t hiddenStates, read_only image2d_t visibleStates,\n",
"    write_only image2d_t reconErrors, read_only image3d_t weights,\n",
"    int2 visibleSize, int2 hiddenSize, float2 visibleToHidden, float2 hiddenToVisible, int radius, int2 reverseRadii)\n",
"{\n",
"    int2 visiblePosition = (int2)(get_global_id(0), get_global_id(1));\n",
"    int2 hiddenPositionCenter = (int2)(visiblePosition.x * visibleToHidden.x + 0.5f, visiblePosition.y * visibleToHidden.y + 0.5f);\n",
"\n",
"    float recon = 0.0f;\n",
"    float div = 0.0f;\n",
"\n",
"    for (int dx = -reverseRadii.x; dx <= reverseRadii.x; dx++)\n",
"        for (int dy = -reverseRadii.y; dy <= reverseRadii.y; dy++) {\n",
"            int2 hiddenPosition = hiddenPositionCenter + (int2)(dx, dy);\n",
"\n",
"            if (inBounds0(hiddenPosition, hiddenSize)) {\n",
"                // Next layer node's receptive field\n",
"                int2 fieldCenter = (int2)(hiddenPosition.x * hiddenToVisible.x + 0.5f, hiddenPosition.y * hiddenToVisible.y + 0.5f);\n",
"\n",
"                int2 fieldLowerBound = fieldCenter - (int2)(radius);\n",
"                int2 fieldUpperBound = fieldCenter + (int2)(radius + 1); // So is included in inBounds\n",
"\n",
"                // Check for containment\n",
"                if (inBounds(visiblePosition, fieldLowerBound, fieldUpperBound)) {\n",
"                    int2 offset = visiblePosition - fieldLowerBound;\n",
"\n",
"                    float hiddenState = read_imagef(hiddenStates, defaultSampler, hiddenPosition).x;\n",
"\n",
"                    int wi = offset.y + offset.x * (radius * 2 + 1);\n",
"\n",
"                    float weight = read_imagef(weights, defaultSampler, (int4)(hiddenPosition.x, hiddenPosition.y, wi, 0)).x;\n",
"\n",
"                    recon += hiddenState * weight;\n",
"                    div += hiddenState;\n",
"                }\n",
"            }\n",
"        }\n",
"\n",
"    float visibleState = read_imagef(visibleStates, defaultSampler, visiblePosition).x;\n",
"\n",
"    write_imagef(reconErrors, visiblePosition, (float4)(visibleState - recon, 0.0f, 0.0f, 0.0f));\n",
"}\n",
"\n",
"void kernel scSolveHidden(read_only image2d_t activations,\n",
"    write_only image2d_t hiddenStatesFront,\n",
"    int2 hiddenSize, int radius, float activeRatio)\n",
"{\n",
"    //uint2 seedValue = seed + (uint2)(get_global_id(0) * 51 + 23, get_global_id(1) * 82 + 59) * 24;\n",
"    int2 hiddenPosition = (int2)(get_global_id(0), get_global_id(1));\n",
"\n",
"    int2 fieldLowerBound = hiddenPosition - (int2)(radius);\n",
"\n",
"    float activation = read_imagef(activations, defaultSampler, hiddenPosition).x;\n",
"\n",
"    float inhibition = 0.0f;\n",
"\n",
"    float count = 0.0f;\n",
"\n",
"    for (int dx = -radius; dx <= radius; dx++)\n",
"        for (int dy = -radius; dy <= radius; dy++) {\n",
"            if (dx == 0 && dy == 0)\n",
"                continue;\n",
"\n",
"            int2 otherPosition = hiddenPosition + (int2)(dx, dy);\n",
"\n",
"            if (inBounds0(otherPosition, hiddenSize)) {\n",
"                float otherActivation = read_imagef(activations, defaultSampler, otherPosition).x;\n",
"\n",
"                inhibition += otherActivation >= activation ? 1.0f : 0.0f;\n",
"                count += 1.0f;\n",
"            }\n",
"        }\n",
"\n",
"    float state = inhibition <= activeRatio * count ? 1.0f : 0.0f;\n",
"\n",
"    write_imagef(hiddenStatesFront, hiddenPosition, (float4)(state));\n",
"}\n",
"\n",
"void kernel scLearnWeights(read_only image2d_t hiddenStates, read_only image2d_t hiddenStatesPrev,\n",
"    read_only image2d_t reconErrors,\n",
"    read_only image3d_t weightsBack, write_only image3d_t weightsFront,\n",
"    int2 visibleSize, float2 hiddenToVisible, int radius, float activeRatio, float weightAlpha)\n",
"{\n",
"    int2 hiddenPosition = (int2)(get_global_id(0), get_global_id(1));\n",
"    int2 visiblePositionCenter = (int2)(hiddenPosition.x * hiddenToVisible.x + 0.5f, hiddenPosition.y * hiddenToVisible.y + 0.5f);\n",
"\n",
"    int2 fieldLowerBound = visiblePositionCenter - (int2)(radius);\n",
"\n",
"    float hiddenState = read_imagef(hiddenStates, defaultSampler, hiddenPosition).x;\n",
"    float hiddenStatePrev = read_imagef(hiddenStatesPrev, defaultSampler, hiddenPosition).x;\n",
"\n",
"    for (int dx = -radius; dx <= radius; dx++)\n",
"        for (int dy = -radius; dy <= radius; dy++) {\n",
"            int2 visiblePosition = visiblePositionCenter + (int2)(dx, dy);\n",
"\n",
"            if (inBounds0(visiblePosition, visibleSize)) {\n",
"                int2 offset = visiblePosition - fieldLowerBound;\n",
"\n",
"                int wi = offset.y + offset.x * (radius * 2 + 1);\n",
"\n",
"                float weightPrev = read_imagef(weightsBack, defaultSampler, (int4)(hiddenPosition.x, hiddenPosition.y, wi, 0)).x;\n",
"\n",
"                float reconError = read_imagef(reconErrors, defaultSampler, visiblePosition).x;\n",
"\n",
"                write_imagef(weightsFront, (int4)(hiddenPosition.x, hiddenPosition.y, wi, 0), (float4)(weightPrev + weightAlpha * hiddenState * reconError));\n",
"            }\n",
"        }\n",
"}\n",
"\n",
"void kernel scLearnThresholds(read_only image2d_t hiddenStates, read_only image2d_t hiddenThresholdsBack, write_only image2d_t hiddenThresholdsFront, float thresholdAlpha, float activeRatio) {\n",
"    int2 hiddenPosition = (int2)(get_global_id(0), get_global_id(1));\n",
"\n",
"    float hiddenState = read_imagef(hiddenStates, defaultSampler, hiddenPosition).x;\n",
"\n",
"    float hiddenThresholdPrev = read_imagef(hiddenThresholdsBack, defaultSampler, hiddenPosition).x;\n",
"\n",
"    write_imagef(hiddenThresholdsFront, hiddenPosition, (float4)(hiddenThresholdPrev + thresholdAlpha * (activeRatio - hiddenState), 0.0f, 0.0f, 0.0f));\n",
"}\n",
"\n",
"void kernel scDeriveInputs(read_only image2d_t inputs, read_only image2d_t outputsBack, write_only image2d_t outputsFront, float lambda) {\n",
"    int2 position = (int2)(get_global_id(0), get_global_id(1));\n",
"\n",
"    float input = read_imagef(inputs, defaultSampler, position).x;\n",
"\n",
"    float2 outputPrev = read_imagef(outputsBack, defaultSampler, position).xy;\n",
"\n",
"    write_imagef(outputsFront, position, (float4)(input, lambda * outputPrev.y + (1.0f - lambda) * input, 0.0f, 0.0f));\n",
"}\n",
"\n",
"void kernel scReconstruct(read_only image2d_t hiddenStates,\n",
"    write_only image2d_t reconstruction, read_only image3d_t weights,\n",
"    int2 visibleSize, int2 hiddenSize, float2 visibleToHidden, float2 hiddenToVisible, int radius, int2 reverseRadii)\n",
"{\n",
"    int2 visiblePosition = (int2)(get_global_id(0), get_global_id(1));\n",
"    int2 hiddenPositionCenter = (int2)(visiblePosition.x * visibleToHidden.x + 0.5f, visiblePosition.y * visibleToHidden.y + 0.5f);\n",
"\n",
"    float recon = 0.0f;\n",
"    float div = 0.0f;\n",
"\n",
"    for (int dx = -reverseRadii.x; dx <= reverseRadii.x; dx++)\n",
"        for (int dy = -reverseRadii.y; dy <= reverseRadii.y; dy++) {\n",
"            int2 hiddenPosition = hiddenPositionCenter + (int2)(dx, dy);\n",
"\n",
"            if (inBounds0(hiddenPosition, hiddenSize)) {\n",
"                // Next layer node's receptive field\n",
"                int2 fieldCenter = (int2)(hiddenPosition.x * hiddenToVisible.x + 0.5f, hiddenPosition.y * hiddenToVisible.y + 0.5f);\n",
"\n",
"                int2 fieldLowerBound = fieldCenter - (int2)(radius);\n",
"                int2 fieldUpperBound = fieldCenter + (int2)(radius + 1); // So is included in inBounds\n",
"\n",
"                // Check for containment\n",
"                if (inBounds(visiblePosition, fieldLowerBound, fieldUpperBound)) {\n",
"                    int2 offset = visiblePosition - fieldLowerBound;\n",
"\n",
"                    float hiddenState = read_imagef(hiddenStates, defaultSampler, hiddenPosition).x;\n",
"\n",
"                    int wi = offset.y + offset.x * (radius * 2 + 1);\n",
"\n",
"                    float weight = read_imagef(weights, defaultSampler, (int4)(hiddenPosition.x, hiddenPosition.y, wi, 0)).x;\n",
"\n",
"                    recon += hiddenState * weight;\n",
"                    div += hiddenState;\n",
"                }\n",
"            }\n",
"        }\n",
"\n",
"    write_imagef(reconstruction, visiblePosition, (float4)(recon, 0.0f, 0.0f, 0.0f));\n",
"}\n",
"\n",
"// ----------------------------------------- Preprocessing -----------------------------------------\n",
"\n",
"void kernel whiten(read_only image2d_t input, write_only image2d_t result, int2 imageSize, int kernelRadius, float intensity) {\n",
"    int2 position = (int2)(get_global_id(0), get_global_id(1));\n",
"\n",
"    float4 currentColor = read_imagef(input, defaultSampler, position);\n",
"\n",
"    float4 center = currentColor;\n",
"\n",
"    float count = 0.0f;\n",
"\n",
"    for (int dx = -kernelRadius; dx <= kernelRadius; dx++)\n",
"        for (int dy = -kernelRadius; dy <= kernelRadius; dy++) {\n",
"            if (dx == 0 && dy == 0)\n",
"                continue;\n",
"\n",
"            int2 otherPosition = position + (int2)(dx, dy);\n",
"\n",
"            if (inBounds0(otherPosition, imageSize)) {\n",
"                float4 otherColor = read_imagef(input, defaultSampler, otherPosition);\n",
"\n",
"                center += otherColor;\n",
"\n",
"                count += 1.0f;\n",
"            }\n",
"        }\n",
"\n",
"    center /= count + 1.0f;\n",
"\n",
"    float4 centeredCurrentColor = currentColor - center;\n",
"\n",
"    float4 covariances = (float4)(0.0f);\n",
"\n",
"    for (int dx = -kernelRadius; dx <= kernelRadius; dx++)\n",
"        for (int dy = -kernelRadius; dy <= kernelRadius; dy++) {\n",
"            if (dx == 0 && dy == 0)\n",
"                continue;\n",
"\n",
"            int2 otherPosition = position + (int2)(dx, dy);\n",
"\n",
"            if (inBounds0(otherPosition, imageSize)) {\n",
"                float4 otherColor = read_imagef(input, defaultSampler, otherPosition);\n",
"\n",
"                float4 centeredOtherColor = otherColor - center;\n",
"\n",
"                covariances += centeredOtherColor * centeredCurrentColor;\n",
"            }\n",
"        }\n",
"\n",
"    covariances /= fmax(1.0f, count);\n",
"\n",
"    float4 centeredCurrentColorSigns = (float4)(centeredCurrentColor.x > 0.0f ? 1.0f : -1.0f,\n",
"        centeredCurrentColor.y > 0.0f ? 1.0f : -1.0f,\n",
"        centeredCurrentColor.z > 0.0f ? 1.0f : -1.0f,\n",
"        centeredCurrentColor.w > 0.0f ? 1.0f : -1.0f);\n",
"\n",
"    // Modify color\n",
"    float4 whitenedColor = fmin(1.0f, fmax(-1.0f, (centeredCurrentColor > 0.0f ? (float4)(1.0f) : (float4)(-1.0f)) * (1.0f - exp(-fabs(intensity * covariances)))));\n",
"\n",
"    write_imagef(result, position, whitenedColor);\n",
"}\n",
};

#endif
