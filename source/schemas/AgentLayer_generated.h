// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_AGENTLAYER_OGMANEO_SCHEMAS_H_
#define FLATBUFFERS_GENERATED_AGENTLAYER_OGMANEO_SCHEMAS_H_

#include "flatbuffers/flatbuffers.h"

#include "Helpers_generated.h"

namespace ogmaneo {
namespace schemas {

struct VisibleAgentLayerDesc;

struct VisibleAgentLayer;

struct AgentLayer;

MANUALLY_ALIGNED_STRUCT(4) VisibleAgentLayerDesc FLATBUFFERS_FINAL_CLASS {
 private:
  ogmaneo::schemas::int2 _size_;
  int32_t _radius_;
  float _qAlpha_;
  float _actionAlpha_;

 public:
  VisibleAgentLayerDesc() { memset(this, 0, sizeof(VisibleAgentLayerDesc)); }
  VisibleAgentLayerDesc(const VisibleAgentLayerDesc &_o) { memcpy(this, &_o, sizeof(VisibleAgentLayerDesc)); }
  VisibleAgentLayerDesc(const ogmaneo::schemas::int2 &__size, int32_t __radius, float __qAlpha, float __actionAlpha)
    : _size_(__size), _radius_(flatbuffers::EndianScalar(__radius)), _qAlpha_(flatbuffers::EndianScalar(__qAlpha)), _actionAlpha_(flatbuffers::EndianScalar(__actionAlpha)) { }

  const ogmaneo::schemas::int2 &_size() const { return _size_; }
  ogmaneo::schemas::int2 &mutable__size() { return _size_; }
  int32_t _radius() const { return flatbuffers::EndianScalar(_radius_); }
  void mutate__radius(int32_t __radius) { flatbuffers::WriteScalar(&_radius_, __radius); }
  float _qAlpha() const { return flatbuffers::EndianScalar(_qAlpha_); }
  void mutate__qAlpha(float __qAlpha) { flatbuffers::WriteScalar(&_qAlpha_, __qAlpha); }
  float _actionAlpha() const { return flatbuffers::EndianScalar(_actionAlpha_); }
  void mutate__actionAlpha(float __actionAlpha) { flatbuffers::WriteScalar(&_actionAlpha_, __actionAlpha); }
};
STRUCT_END(VisibleAgentLayerDesc, 20);

struct VisibleAgentLayer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__QWEIGHTS = 4,
    VT__ACTIONWEIGHTS = 6,
    VT__QTOVISIBLE = 8,
    VT__VISIBLETOQ = 10,
    VT__REVERSERADIIQ = 12,
    VT__HIDDENTOVISIBLE = 14,
    VT__VISIBLETOHIDDEN = 16,
    VT__REVERSERADIIHIDDEN = 18
  };
  const ogmaneo::schemas::DoubleBuffer3D *_qWeights() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer3D *>(VT__QWEIGHTS); }
  ogmaneo::schemas::DoubleBuffer3D *mutable__qWeights() { return GetPointer<ogmaneo::schemas::DoubleBuffer3D *>(VT__QWEIGHTS); }
  const ogmaneo::schemas::DoubleBuffer3D *_actionWeights() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer3D *>(VT__ACTIONWEIGHTS); }
  ogmaneo::schemas::DoubleBuffer3D *mutable__actionWeights() { return GetPointer<ogmaneo::schemas::DoubleBuffer3D *>(VT__ACTIONWEIGHTS); }
  const ogmaneo::schemas::float2 *_qToVisible() const { return GetStruct<const ogmaneo::schemas::float2 *>(VT__QTOVISIBLE); }
  ogmaneo::schemas::float2 *mutable__qToVisible() { return GetStruct<ogmaneo::schemas::float2 *>(VT__QTOVISIBLE); }
  const ogmaneo::schemas::float2 *_visibleToQ() const { return GetStruct<const ogmaneo::schemas::float2 *>(VT__VISIBLETOQ); }
  ogmaneo::schemas::float2 *mutable__visibleToQ() { return GetStruct<ogmaneo::schemas::float2 *>(VT__VISIBLETOQ); }
  const ogmaneo::schemas::int2 *_reverseRadiiQ() const { return GetStruct<const ogmaneo::schemas::int2 *>(VT__REVERSERADIIQ); }
  ogmaneo::schemas::int2 *mutable__reverseRadiiQ() { return GetStruct<ogmaneo::schemas::int2 *>(VT__REVERSERADIIQ); }
  const ogmaneo::schemas::float2 *_hiddenToVisible() const { return GetStruct<const ogmaneo::schemas::float2 *>(VT__HIDDENTOVISIBLE); }
  ogmaneo::schemas::float2 *mutable__hiddenToVisible() { return GetStruct<ogmaneo::schemas::float2 *>(VT__HIDDENTOVISIBLE); }
  const ogmaneo::schemas::float2 *_visibleToHidden() const { return GetStruct<const ogmaneo::schemas::float2 *>(VT__VISIBLETOHIDDEN); }
  ogmaneo::schemas::float2 *mutable__visibleToHidden() { return GetStruct<ogmaneo::schemas::float2 *>(VT__VISIBLETOHIDDEN); }
  const ogmaneo::schemas::int2 *_reverseRadiiHidden() const { return GetStruct<const ogmaneo::schemas::int2 *>(VT__REVERSERADIIHIDDEN); }
  ogmaneo::schemas::int2 *mutable__reverseRadiiHidden() { return GetStruct<ogmaneo::schemas::int2 *>(VT__REVERSERADIIHIDDEN); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__QWEIGHTS) &&
           verifier.VerifyTable(_qWeights()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__ACTIONWEIGHTS) &&
           verifier.VerifyTable(_actionWeights()) &&
           VerifyField<ogmaneo::schemas::float2>(verifier, VT__QTOVISIBLE) &&
           VerifyField<ogmaneo::schemas::float2>(verifier, VT__VISIBLETOQ) &&
           VerifyField<ogmaneo::schemas::int2>(verifier, VT__REVERSERADIIQ) &&
           VerifyField<ogmaneo::schemas::float2>(verifier, VT__HIDDENTOVISIBLE) &&
           VerifyField<ogmaneo::schemas::float2>(verifier, VT__VISIBLETOHIDDEN) &&
           VerifyField<ogmaneo::schemas::int2>(verifier, VT__REVERSERADIIHIDDEN) &&
           verifier.EndTable();
  }
};

struct VisibleAgentLayerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__qWeights(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer3D> _qWeights) { fbb_.AddOffset(VisibleAgentLayer::VT__QWEIGHTS, _qWeights); }
  void add__actionWeights(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer3D> _actionWeights) { fbb_.AddOffset(VisibleAgentLayer::VT__ACTIONWEIGHTS, _actionWeights); }
  void add__qToVisible(const ogmaneo::schemas::float2 *_qToVisible) { fbb_.AddStruct(VisibleAgentLayer::VT__QTOVISIBLE, _qToVisible); }
  void add__visibleToQ(const ogmaneo::schemas::float2 *_visibleToQ) { fbb_.AddStruct(VisibleAgentLayer::VT__VISIBLETOQ, _visibleToQ); }
  void add__reverseRadiiQ(const ogmaneo::schemas::int2 *_reverseRadiiQ) { fbb_.AddStruct(VisibleAgentLayer::VT__REVERSERADIIQ, _reverseRadiiQ); }
  void add__hiddenToVisible(const ogmaneo::schemas::float2 *_hiddenToVisible) { fbb_.AddStruct(VisibleAgentLayer::VT__HIDDENTOVISIBLE, _hiddenToVisible); }
  void add__visibleToHidden(const ogmaneo::schemas::float2 *_visibleToHidden) { fbb_.AddStruct(VisibleAgentLayer::VT__VISIBLETOHIDDEN, _visibleToHidden); }
  void add__reverseRadiiHidden(const ogmaneo::schemas::int2 *_reverseRadiiHidden) { fbb_.AddStruct(VisibleAgentLayer::VT__REVERSERADIIHIDDEN, _reverseRadiiHidden); }
  VisibleAgentLayerBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  VisibleAgentLayerBuilder &operator=(const VisibleAgentLayerBuilder &);
  flatbuffers::Offset<VisibleAgentLayer> Finish() {
    auto o = flatbuffers::Offset<VisibleAgentLayer>(fbb_.EndTable(start_, 8));
    return o;
  }
};

inline flatbuffers::Offset<VisibleAgentLayer> CreateVisibleAgentLayer(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer3D> _qWeights = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer3D> _actionWeights = 0,
    const ogmaneo::schemas::float2 *_qToVisible = 0,
    const ogmaneo::schemas::float2 *_visibleToQ = 0,
    const ogmaneo::schemas::int2 *_reverseRadiiQ = 0,
    const ogmaneo::schemas::float2 *_hiddenToVisible = 0,
    const ogmaneo::schemas::float2 *_visibleToHidden = 0,
    const ogmaneo::schemas::int2 *_reverseRadiiHidden = 0) {
  VisibleAgentLayerBuilder builder_(_fbb);
  builder_.add__reverseRadiiHidden(_reverseRadiiHidden);
  builder_.add__visibleToHidden(_visibleToHidden);
  builder_.add__hiddenToVisible(_hiddenToVisible);
  builder_.add__reverseRadiiQ(_reverseRadiiQ);
  builder_.add__visibleToQ(_visibleToQ);
  builder_.add__qToVisible(_qToVisible);
  builder_.add__actionWeights(_actionWeights);
  builder_.add__qWeights(_qWeights);
  return builder_.Finish();
}

struct AgentLayer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__NUMACTIONTILES = 4,
    VT__ACTIONTILESIZE = 6,
    VT__HIDDENSIZE = 8,
    VT__QSTATES = 10,
    VT__ACTIONPROBABILITIES = 12,
    VT__ACTIONTAKEN = 14,
    VT__TDERROR = 16,
    VT__ONEHOTACTION = 18,
    VT__HIDDENSUMMATIONTEMPQ = 20,
    VT__HIDDENSUMMATIONTEMPHIDDEN = 22,
    VT__VISIBLELAYERDESCS = 24,
    VT__VISIBLELAYERS = 26
  };
  const ogmaneo::schemas::int2 *_numActionTiles() const { return GetStruct<const ogmaneo::schemas::int2 *>(VT__NUMACTIONTILES); }
  ogmaneo::schemas::int2 *mutable__numActionTiles() { return GetStruct<ogmaneo::schemas::int2 *>(VT__NUMACTIONTILES); }
  const ogmaneo::schemas::int2 *_actionTileSize() const { return GetStruct<const ogmaneo::schemas::int2 *>(VT__ACTIONTILESIZE); }
  ogmaneo::schemas::int2 *mutable__actionTileSize() { return GetStruct<ogmaneo::schemas::int2 *>(VT__ACTIONTILESIZE); }
  const ogmaneo::schemas::int2 *_hiddenSize() const { return GetStruct<const ogmaneo::schemas::int2 *>(VT__HIDDENSIZE); }
  ogmaneo::schemas::int2 *mutable__hiddenSize() { return GetStruct<ogmaneo::schemas::int2 *>(VT__HIDDENSIZE); }
  const ogmaneo::schemas::DoubleBuffer2D *_qStates() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer2D *>(VT__QSTATES); }
  ogmaneo::schemas::DoubleBuffer2D *mutable__qStates() { return GetPointer<ogmaneo::schemas::DoubleBuffer2D *>(VT__QSTATES); }
  const ogmaneo::schemas::DoubleBuffer2D *_actionProbabilities() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer2D *>(VT__ACTIONPROBABILITIES); }
  ogmaneo::schemas::DoubleBuffer2D *mutable__actionProbabilities() { return GetPointer<ogmaneo::schemas::DoubleBuffer2D *>(VT__ACTIONPROBABILITIES); }
  const ogmaneo::schemas::DoubleBuffer2D *_actionTaken() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer2D *>(VT__ACTIONTAKEN); }
  ogmaneo::schemas::DoubleBuffer2D *mutable__actionTaken() { return GetPointer<ogmaneo::schemas::DoubleBuffer2D *>(VT__ACTIONTAKEN); }
  const ogmaneo::schemas::Image2D *_tdError() const { return GetPointer<const ogmaneo::schemas::Image2D *>(VT__TDERROR); }
  ogmaneo::schemas::Image2D *mutable__tdError() { return GetPointer<ogmaneo::schemas::Image2D *>(VT__TDERROR); }
  const ogmaneo::schemas::Image2D *_oneHotAction() const { return GetPointer<const ogmaneo::schemas::Image2D *>(VT__ONEHOTACTION); }
  ogmaneo::schemas::Image2D *mutable__oneHotAction() { return GetPointer<ogmaneo::schemas::Image2D *>(VT__ONEHOTACTION); }
  const ogmaneo::schemas::DoubleBuffer2D *_hiddenSummationTempQ() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer2D *>(VT__HIDDENSUMMATIONTEMPQ); }
  ogmaneo::schemas::DoubleBuffer2D *mutable__hiddenSummationTempQ() { return GetPointer<ogmaneo::schemas::DoubleBuffer2D *>(VT__HIDDENSUMMATIONTEMPQ); }
  const ogmaneo::schemas::DoubleBuffer2D *_hiddenSummationTempHidden() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer2D *>(VT__HIDDENSUMMATIONTEMPHIDDEN); }
  ogmaneo::schemas::DoubleBuffer2D *mutable__hiddenSummationTempHidden() { return GetPointer<ogmaneo::schemas::DoubleBuffer2D *>(VT__HIDDENSUMMATIONTEMPHIDDEN); }
  const flatbuffers::Vector<const VisibleAgentLayerDesc *> *_visibleLayerDescs() const { return GetPointer<const flatbuffers::Vector<const VisibleAgentLayerDesc *> *>(VT__VISIBLELAYERDESCS); }
  flatbuffers::Vector<const VisibleAgentLayerDesc *> *mutable__visibleLayerDescs() { return GetPointer<flatbuffers::Vector<const VisibleAgentLayerDesc *> *>(VT__VISIBLELAYERDESCS); }
  const flatbuffers::Vector<flatbuffers::Offset<VisibleAgentLayer>> *_visibleLayers() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<VisibleAgentLayer>> *>(VT__VISIBLELAYERS); }
  flatbuffers::Vector<flatbuffers::Offset<VisibleAgentLayer>> *mutable__visibleLayers() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<VisibleAgentLayer>> *>(VT__VISIBLELAYERS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<ogmaneo::schemas::int2>(verifier, VT__NUMACTIONTILES) &&
           VerifyField<ogmaneo::schemas::int2>(verifier, VT__ACTIONTILESIZE) &&
           VerifyField<ogmaneo::schemas::int2>(verifier, VT__HIDDENSIZE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__QSTATES) &&
           verifier.VerifyTable(_qStates()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__ACTIONPROBABILITIES) &&
           verifier.VerifyTable(_actionProbabilities()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__ACTIONTAKEN) &&
           verifier.VerifyTable(_actionTaken()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__TDERROR) &&
           verifier.VerifyTable(_tdError()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__ONEHOTACTION) &&
           verifier.VerifyTable(_oneHotAction()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__HIDDENSUMMATIONTEMPQ) &&
           verifier.VerifyTable(_hiddenSummationTempQ()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__HIDDENSUMMATIONTEMPHIDDEN) &&
           verifier.VerifyTable(_hiddenSummationTempHidden()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__VISIBLELAYERDESCS) &&
           verifier.Verify(_visibleLayerDescs()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__VISIBLELAYERS) &&
           verifier.Verify(_visibleLayers()) &&
           verifier.VerifyVectorOfTables(_visibleLayers()) &&
           verifier.EndTable();
  }
};

struct AgentLayerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__numActionTiles(const ogmaneo::schemas::int2 *_numActionTiles) { fbb_.AddStruct(AgentLayer::VT__NUMACTIONTILES, _numActionTiles); }
  void add__actionTileSize(const ogmaneo::schemas::int2 *_actionTileSize) { fbb_.AddStruct(AgentLayer::VT__ACTIONTILESIZE, _actionTileSize); }
  void add__hiddenSize(const ogmaneo::schemas::int2 *_hiddenSize) { fbb_.AddStruct(AgentLayer::VT__HIDDENSIZE, _hiddenSize); }
  void add__qStates(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _qStates) { fbb_.AddOffset(AgentLayer::VT__QSTATES, _qStates); }
  void add__actionProbabilities(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _actionProbabilities) { fbb_.AddOffset(AgentLayer::VT__ACTIONPROBABILITIES, _actionProbabilities); }
  void add__actionTaken(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _actionTaken) { fbb_.AddOffset(AgentLayer::VT__ACTIONTAKEN, _actionTaken); }
  void add__tdError(flatbuffers::Offset<ogmaneo::schemas::Image2D> _tdError) { fbb_.AddOffset(AgentLayer::VT__TDERROR, _tdError); }
  void add__oneHotAction(flatbuffers::Offset<ogmaneo::schemas::Image2D> _oneHotAction) { fbb_.AddOffset(AgentLayer::VT__ONEHOTACTION, _oneHotAction); }
  void add__hiddenSummationTempQ(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenSummationTempQ) { fbb_.AddOffset(AgentLayer::VT__HIDDENSUMMATIONTEMPQ, _hiddenSummationTempQ); }
  void add__hiddenSummationTempHidden(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenSummationTempHidden) { fbb_.AddOffset(AgentLayer::VT__HIDDENSUMMATIONTEMPHIDDEN, _hiddenSummationTempHidden); }
  void add__visibleLayerDescs(flatbuffers::Offset<flatbuffers::Vector<const VisibleAgentLayerDesc *>> _visibleLayerDescs) { fbb_.AddOffset(AgentLayer::VT__VISIBLELAYERDESCS, _visibleLayerDescs); }
  void add__visibleLayers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VisibleAgentLayer>>> _visibleLayers) { fbb_.AddOffset(AgentLayer::VT__VISIBLELAYERS, _visibleLayers); }
  AgentLayerBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AgentLayerBuilder &operator=(const AgentLayerBuilder &);
  flatbuffers::Offset<AgentLayer> Finish() {
    auto o = flatbuffers::Offset<AgentLayer>(fbb_.EndTable(start_, 12));
    return o;
  }
};

inline flatbuffers::Offset<AgentLayer> CreateAgentLayer(flatbuffers::FlatBufferBuilder &_fbb,
    const ogmaneo::schemas::int2 *_numActionTiles = 0,
    const ogmaneo::schemas::int2 *_actionTileSize = 0,
    const ogmaneo::schemas::int2 *_hiddenSize = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _qStates = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _actionProbabilities = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _actionTaken = 0,
    flatbuffers::Offset<ogmaneo::schemas::Image2D> _tdError = 0,
    flatbuffers::Offset<ogmaneo::schemas::Image2D> _oneHotAction = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenSummationTempQ = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenSummationTempHidden = 0,
    flatbuffers::Offset<flatbuffers::Vector<const VisibleAgentLayerDesc *>> _visibleLayerDescs = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VisibleAgentLayer>>> _visibleLayers = 0) {
  AgentLayerBuilder builder_(_fbb);
  builder_.add__visibleLayers(_visibleLayers);
  builder_.add__visibleLayerDescs(_visibleLayerDescs);
  builder_.add__hiddenSummationTempHidden(_hiddenSummationTempHidden);
  builder_.add__hiddenSummationTempQ(_hiddenSummationTempQ);
  builder_.add__oneHotAction(_oneHotAction);
  builder_.add__tdError(_tdError);
  builder_.add__actionTaken(_actionTaken);
  builder_.add__actionProbabilities(_actionProbabilities);
  builder_.add__qStates(_qStates);
  builder_.add__hiddenSize(_hiddenSize);
  builder_.add__actionTileSize(_actionTileSize);
  builder_.add__numActionTiles(_numActionTiles);
  return builder_.Finish();
}

inline flatbuffers::Offset<AgentLayer> CreateAgentLayerDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const ogmaneo::schemas::int2 *_numActionTiles = 0,
    const ogmaneo::schemas::int2 *_actionTileSize = 0,
    const ogmaneo::schemas::int2 *_hiddenSize = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _qStates = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _actionProbabilities = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _actionTaken = 0,
    flatbuffers::Offset<ogmaneo::schemas::Image2D> _tdError = 0,
    flatbuffers::Offset<ogmaneo::schemas::Image2D> _oneHotAction = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenSummationTempQ = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenSummationTempHidden = 0,
    const std::vector<const VisibleAgentLayerDesc *> *_visibleLayerDescs = nullptr,
    const std::vector<flatbuffers::Offset<VisibleAgentLayer>> *_visibleLayers = nullptr) {
  return CreateAgentLayer(_fbb, _numActionTiles, _actionTileSize, _hiddenSize, _qStates, _actionProbabilities, _actionTaken, _tdError, _oneHotAction, _hiddenSummationTempQ, _hiddenSummationTempHidden, _visibleLayerDescs ? _fbb.CreateVector<const VisibleAgentLayerDesc *>(*_visibleLayerDescs) : 0, _visibleLayers ? _fbb.CreateVector<flatbuffers::Offset<VisibleAgentLayer>>(*_visibleLayers) : 0);
}

}  // namespace schemas
}  // namespace ogmaneo

#endif  // FLATBUFFERS_GENERATED_AGENTLAYER_OGMANEO_SCHEMAS_H_
