// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PREDICTORLAYER_OGMANEO_SCHEMAS_H_
#define FLATBUFFERS_GENERATED_PREDICTORLAYER_OGMANEO_SCHEMAS_H_

#include "flatbuffers/flatbuffers.h"

#include "Helpers_generated.h"
#include "SparseFeatures_generated.h"
#include "SparseFeaturesChunk_generated.h"
#include "SparseFeaturesDelay_generated.h"
#include "SparseFeaturesSTDP_generated.h"

namespace ogmaneo {
namespace schemas {

struct VisiblePredictorLayerDesc;

struct VisiblePredictorLayer;

struct PredictorLayer;

MANUALLY_ALIGNED_STRUCT(4) VisiblePredictorLayerDesc FLATBUFFERS_FINAL_CLASS {
 private:
  ogmaneo::schemas::int2 _size_;
  int32_t _radius_;
  float _alpha_;

 public:
  VisiblePredictorLayerDesc() { memset(this, 0, sizeof(VisiblePredictorLayerDesc)); }
  VisiblePredictorLayerDesc(const VisiblePredictorLayerDesc &_o) { memcpy(this, &_o, sizeof(VisiblePredictorLayerDesc)); }
  VisiblePredictorLayerDesc(const ogmaneo::schemas::int2 &__size, int32_t __radius, float __alpha)
    : _size_(__size), _radius_(flatbuffers::EndianScalar(__radius)), _alpha_(flatbuffers::EndianScalar(__alpha)) { }

  const ogmaneo::schemas::int2 &_size() const { return _size_; }
  ogmaneo::schemas::int2 &mutable__size() { return _size_; }
  int32_t _radius() const { return flatbuffers::EndianScalar(_radius_); }
  void mutate__radius(int32_t __radius) { flatbuffers::WriteScalar(&_radius_, __radius); }
  float _alpha() const { return flatbuffers::EndianScalar(_alpha_); }
  void mutate__alpha(float __alpha) { flatbuffers::WriteScalar(&_alpha_, __alpha); }
};
STRUCT_END(VisiblePredictorLayerDesc, 16);

struct VisiblePredictorLayer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__DERIVEDINPUT = 4,
    VT__WEIGHTS = 6,
    VT__HIDDENTOVISIBLE = 8,
    VT__VISIBLETOHIDDEN = 10,
    VT__REVERSERADII = 12
  };
  const ogmaneo::schemas::DoubleBuffer2D *_derivedInput() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer2D *>(VT__DERIVEDINPUT); }
  ogmaneo::schemas::DoubleBuffer2D *mutable__derivedInput() { return GetPointer<ogmaneo::schemas::DoubleBuffer2D *>(VT__DERIVEDINPUT); }
  const ogmaneo::schemas::DoubleBuffer3D *_weights() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer3D *>(VT__WEIGHTS); }
  ogmaneo::schemas::DoubleBuffer3D *mutable__weights() { return GetPointer<ogmaneo::schemas::DoubleBuffer3D *>(VT__WEIGHTS); }
  const ogmaneo::schemas::float2 *_hiddenToVisible() const { return GetStruct<const ogmaneo::schemas::float2 *>(VT__HIDDENTOVISIBLE); }
  ogmaneo::schemas::float2 *mutable__hiddenToVisible() { return GetStruct<ogmaneo::schemas::float2 *>(VT__HIDDENTOVISIBLE); }
  const ogmaneo::schemas::float2 *_visibleToHidden() const { return GetStruct<const ogmaneo::schemas::float2 *>(VT__VISIBLETOHIDDEN); }
  ogmaneo::schemas::float2 *mutable__visibleToHidden() { return GetStruct<ogmaneo::schemas::float2 *>(VT__VISIBLETOHIDDEN); }
  const ogmaneo::schemas::int2 *_reverseRadii() const { return GetStruct<const ogmaneo::schemas::int2 *>(VT__REVERSERADII); }
  ogmaneo::schemas::int2 *mutable__reverseRadii() { return GetStruct<ogmaneo::schemas::int2 *>(VT__REVERSERADII); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__DERIVEDINPUT) &&
           verifier.VerifyTable(_derivedInput()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__WEIGHTS) &&
           verifier.VerifyTable(_weights()) &&
           VerifyField<ogmaneo::schemas::float2>(verifier, VT__HIDDENTOVISIBLE) &&
           VerifyField<ogmaneo::schemas::float2>(verifier, VT__VISIBLETOHIDDEN) &&
           VerifyField<ogmaneo::schemas::int2>(verifier, VT__REVERSERADII) &&
           verifier.EndTable();
  }
};

struct VisiblePredictorLayerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__derivedInput(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _derivedInput) { fbb_.AddOffset(VisiblePredictorLayer::VT__DERIVEDINPUT, _derivedInput); }
  void add__weights(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer3D> _weights) { fbb_.AddOffset(VisiblePredictorLayer::VT__WEIGHTS, _weights); }
  void add__hiddenToVisible(const ogmaneo::schemas::float2 *_hiddenToVisible) { fbb_.AddStruct(VisiblePredictorLayer::VT__HIDDENTOVISIBLE, _hiddenToVisible); }
  void add__visibleToHidden(const ogmaneo::schemas::float2 *_visibleToHidden) { fbb_.AddStruct(VisiblePredictorLayer::VT__VISIBLETOHIDDEN, _visibleToHidden); }
  void add__reverseRadii(const ogmaneo::schemas::int2 *_reverseRadii) { fbb_.AddStruct(VisiblePredictorLayer::VT__REVERSERADII, _reverseRadii); }
  VisiblePredictorLayerBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  VisiblePredictorLayerBuilder &operator=(const VisiblePredictorLayerBuilder &);
  flatbuffers::Offset<VisiblePredictorLayer> Finish() {
    auto o = flatbuffers::Offset<VisiblePredictorLayer>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<VisiblePredictorLayer> CreateVisiblePredictorLayer(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _derivedInput = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer3D> _weights = 0,
    const ogmaneo::schemas::float2 *_hiddenToVisible = 0,
    const ogmaneo::schemas::float2 *_visibleToHidden = 0,
    const ogmaneo::schemas::int2 *_reverseRadii = 0) {
  VisiblePredictorLayerBuilder builder_(_fbb);
  builder_.add__reverseRadii(_reverseRadii);
  builder_.add__visibleToHidden(_visibleToHidden);
  builder_.add__hiddenToVisible(_hiddenToVisible);
  builder_.add__weights(_weights);
  builder_.add__derivedInput(_derivedInput);
  return builder_.Finish();
}

struct PredictorLayer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__HIDDENSIZE = 4,
    VT__HIDDENSUMMATIONTEMP = 6,
    VT__HIDDENSTATES = 8,
    VT__INHIBITSPARSEFEATURES = 10,
    VT__VISIBLELAYERDESCS = 12,
    VT__VISIBLELAYERS = 14
  };
  const ogmaneo::schemas::int2 *_hiddenSize() const { return GetStruct<const ogmaneo::schemas::int2 *>(VT__HIDDENSIZE); }
  ogmaneo::schemas::int2 *mutable__hiddenSize() { return GetStruct<ogmaneo::schemas::int2 *>(VT__HIDDENSIZE); }
  const ogmaneo::schemas::DoubleBuffer2D *_hiddenSummationTemp() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer2D *>(VT__HIDDENSUMMATIONTEMP); }
  ogmaneo::schemas::DoubleBuffer2D *mutable__hiddenSummationTemp() { return GetPointer<ogmaneo::schemas::DoubleBuffer2D *>(VT__HIDDENSUMMATIONTEMP); }
  const ogmaneo::schemas::DoubleBuffer2D *_hiddenStates() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer2D *>(VT__HIDDENSTATES); }
  ogmaneo::schemas::DoubleBuffer2D *mutable__hiddenStates() { return GetPointer<ogmaneo::schemas::DoubleBuffer2D *>(VT__HIDDENSTATES); }
  const ogmaneo::schemas::SparseFeatures *_inhibitSparseFeatures() const { return GetPointer<const ogmaneo::schemas::SparseFeatures *>(VT__INHIBITSPARSEFEATURES); }
  ogmaneo::schemas::SparseFeatures *mutable__inhibitSparseFeatures() { return GetPointer<ogmaneo::schemas::SparseFeatures *>(VT__INHIBITSPARSEFEATURES); }
  const flatbuffers::Vector<const VisiblePredictorLayerDesc *> *_visibleLayerDescs() const { return GetPointer<const flatbuffers::Vector<const VisiblePredictorLayerDesc *> *>(VT__VISIBLELAYERDESCS); }
  flatbuffers::Vector<const VisiblePredictorLayerDesc *> *mutable__visibleLayerDescs() { return GetPointer<flatbuffers::Vector<const VisiblePredictorLayerDesc *> *>(VT__VISIBLELAYERDESCS); }
  const flatbuffers::Vector<flatbuffers::Offset<VisiblePredictorLayer>> *_visibleLayers() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<VisiblePredictorLayer>> *>(VT__VISIBLELAYERS); }
  flatbuffers::Vector<flatbuffers::Offset<VisiblePredictorLayer>> *mutable__visibleLayers() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<VisiblePredictorLayer>> *>(VT__VISIBLELAYERS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<ogmaneo::schemas::int2>(verifier, VT__HIDDENSIZE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__HIDDENSUMMATIONTEMP) &&
           verifier.VerifyTable(_hiddenSummationTemp()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__HIDDENSTATES) &&
           verifier.VerifyTable(_hiddenStates()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__INHIBITSPARSEFEATURES) &&
           verifier.VerifyTable(_inhibitSparseFeatures()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__VISIBLELAYERDESCS) &&
           verifier.Verify(_visibleLayerDescs()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__VISIBLELAYERS) &&
           verifier.Verify(_visibleLayers()) &&
           verifier.VerifyVectorOfTables(_visibleLayers()) &&
           verifier.EndTable();
  }
};

struct PredictorLayerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__hiddenSize(const ogmaneo::schemas::int2 *_hiddenSize) { fbb_.AddStruct(PredictorLayer::VT__HIDDENSIZE, _hiddenSize); }
  void add__hiddenSummationTemp(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenSummationTemp) { fbb_.AddOffset(PredictorLayer::VT__HIDDENSUMMATIONTEMP, _hiddenSummationTemp); }
  void add__hiddenStates(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenStates) { fbb_.AddOffset(PredictorLayer::VT__HIDDENSTATES, _hiddenStates); }
  void add__inhibitSparseFeatures(flatbuffers::Offset<ogmaneo::schemas::SparseFeatures> _inhibitSparseFeatures) { fbb_.AddOffset(PredictorLayer::VT__INHIBITSPARSEFEATURES, _inhibitSparseFeatures); }
  void add__visibleLayerDescs(flatbuffers::Offset<flatbuffers::Vector<const VisiblePredictorLayerDesc *>> _visibleLayerDescs) { fbb_.AddOffset(PredictorLayer::VT__VISIBLELAYERDESCS, _visibleLayerDescs); }
  void add__visibleLayers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VisiblePredictorLayer>>> _visibleLayers) { fbb_.AddOffset(PredictorLayer::VT__VISIBLELAYERS, _visibleLayers); }
  PredictorLayerBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PredictorLayerBuilder &operator=(const PredictorLayerBuilder &);
  flatbuffers::Offset<PredictorLayer> Finish() {
    auto o = flatbuffers::Offset<PredictorLayer>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<PredictorLayer> CreatePredictorLayer(flatbuffers::FlatBufferBuilder &_fbb,
    const ogmaneo::schemas::int2 *_hiddenSize = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenSummationTemp = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenStates = 0,
    flatbuffers::Offset<ogmaneo::schemas::SparseFeatures> _inhibitSparseFeatures = 0,
    flatbuffers::Offset<flatbuffers::Vector<const VisiblePredictorLayerDesc *>> _visibleLayerDescs = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VisiblePredictorLayer>>> _visibleLayers = 0) {
  PredictorLayerBuilder builder_(_fbb);
  builder_.add__visibleLayers(_visibleLayers);
  builder_.add__visibleLayerDescs(_visibleLayerDescs);
  builder_.add__inhibitSparseFeatures(_inhibitSparseFeatures);
  builder_.add__hiddenStates(_hiddenStates);
  builder_.add__hiddenSummationTemp(_hiddenSummationTemp);
  builder_.add__hiddenSize(_hiddenSize);
  return builder_.Finish();
}

inline flatbuffers::Offset<PredictorLayer> CreatePredictorLayerDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const ogmaneo::schemas::int2 *_hiddenSize = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenSummationTemp = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenStates = 0,
    flatbuffers::Offset<ogmaneo::schemas::SparseFeatures> _inhibitSparseFeatures = 0,
    const std::vector<const VisiblePredictorLayerDesc *> *_visibleLayerDescs = nullptr,
    const std::vector<flatbuffers::Offset<VisiblePredictorLayer>> *_visibleLayers = nullptr) {
  return CreatePredictorLayer(_fbb, _hiddenSize, _hiddenSummationTemp, _hiddenStates, _inhibitSparseFeatures, _visibleLayerDescs ? _fbb.CreateVector<const VisiblePredictorLayerDesc *>(*_visibleLayerDescs) : 0, _visibleLayers ? _fbb.CreateVector<flatbuffers::Offset<VisiblePredictorLayer>>(*_visibleLayers) : 0);
}

}  // namespace schemas
}  // namespace ogmaneo

#endif  // FLATBUFFERS_GENERATED_PREDICTORLAYER_OGMANEO_SCHEMAS_H_
