// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FEATUREHIERARCHY_OGMANEO_SCHEMAS_H_
#define FLATBUFFERS_GENERATED_FEATUREHIERARCHY_OGMANEO_SCHEMAS_H_

#include "flatbuffers/flatbuffers.h"

#include "Helpers_generated.h"
#include "SparseFeatures_generated.h"
#include "SparseFeaturesChunk_generated.h"
#include "SparseFeaturesDelay_generated.h"
#include "SparseFeaturesSTDP_generated.h"

namespace ogmaneo {
namespace schemas {

struct FeatureHierarchyLayerDesc;

struct FeatureHierarchyLayer;

struct FeatureHierarchy;

struct FeatureHierarchyLayerDesc FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__SFDESC = 4,
    VT__POOLSTEPS = 6
  };
  const ogmaneo::schemas::SparseFeaturesDesc *_sfDesc() const { return GetPointer<const ogmaneo::schemas::SparseFeaturesDesc *>(VT__SFDESC); }
  ogmaneo::schemas::SparseFeaturesDesc *mutable__sfDesc() { return GetPointer<ogmaneo::schemas::SparseFeaturesDesc *>(VT__SFDESC); }
  int32_t _poolSteps() const { return GetField<int32_t>(VT__POOLSTEPS, 0); }
  bool mutate__poolSteps(int32_t __poolSteps) { return SetField(VT__POOLSTEPS, __poolSteps); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__SFDESC) &&
           verifier.VerifyTable(_sfDesc()) &&
           VerifyField<int32_t>(verifier, VT__POOLSTEPS) &&
           verifier.EndTable();
  }
};

struct FeatureHierarchyLayerDescBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__sfDesc(flatbuffers::Offset<ogmaneo::schemas::SparseFeaturesDesc> _sfDesc) { fbb_.AddOffset(FeatureHierarchyLayerDesc::VT__SFDESC, _sfDesc); }
  void add__poolSteps(int32_t _poolSteps) { fbb_.AddElement<int32_t>(FeatureHierarchyLayerDesc::VT__POOLSTEPS, _poolSteps, 0); }
  FeatureHierarchyLayerDescBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FeatureHierarchyLayerDescBuilder &operator=(const FeatureHierarchyLayerDescBuilder &);
  flatbuffers::Offset<FeatureHierarchyLayerDesc> Finish() {
    auto o = flatbuffers::Offset<FeatureHierarchyLayerDesc>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<FeatureHierarchyLayerDesc> CreateFeatureHierarchyLayerDesc(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ogmaneo::schemas::SparseFeaturesDesc> _sfDesc = 0,
    int32_t _poolSteps = 0) {
  FeatureHierarchyLayerDescBuilder builder_(_fbb);
  builder_.add__poolSteps(_poolSteps);
  builder_.add__sfDesc(_sfDesc);
  return builder_.Finish();
}

struct FeatureHierarchyLayer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__SF_TYPE = 4,
    VT__SF = 6,
    VT__CLOCK = 8,
    VT__TPBUFFER = 10,
    VT__PREDERRORS = 12,
    VT__TPRESET = 14,
    VT__TPNEXTRESET = 16
  };
  ogmaneo::schemas::SparseFeaturesType _sf_type() const { return static_cast<ogmaneo::schemas::SparseFeaturesType>(GetField<uint8_t>(VT__SF_TYPE, 0)); }
  bool mutate__sf_type(ogmaneo::schemas::SparseFeaturesType __sf_type) { return SetField(VT__SF_TYPE, static_cast<uint8_t>(__sf_type)); }
  const void *_sf() const { return GetPointer<const void *>(VT__SF); }
  void *mutable__sf() { return GetPointer<void *>(VT__SF); }
  int32_t _clock() const { return GetField<int32_t>(VT__CLOCK, 0); }
  bool mutate__clock(int32_t __clock) { return SetField(VT__CLOCK, __clock); }
  const ogmaneo::schemas::DoubleBuffer2D *_tpBuffer() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer2D *>(VT__TPBUFFER); }
  ogmaneo::schemas::DoubleBuffer2D *mutable__tpBuffer() { return GetPointer<ogmaneo::schemas::DoubleBuffer2D *>(VT__TPBUFFER); }
  const ogmaneo::schemas::Image2D *_predErrors() const { return GetPointer<const ogmaneo::schemas::Image2D *>(VT__PREDERRORS); }
  ogmaneo::schemas::Image2D *mutable__predErrors() { return GetPointer<ogmaneo::schemas::Image2D *>(VT__PREDERRORS); }
  bool _tpReset() const { return GetField<uint8_t>(VT__TPRESET, 0) != 0; }
  bool mutate__tpReset(bool __tpReset) { return SetField(VT__TPRESET, static_cast<uint8_t>(__tpReset)); }
  bool _tpNextReset() const { return GetField<uint8_t>(VT__TPNEXTRESET, 0) != 0; }
  bool mutate__tpNextReset(bool __tpNextReset) { return SetField(VT__TPNEXTRESET, static_cast<uint8_t>(__tpNextReset)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT__SF_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__SF) &&
           VerifySparseFeaturesType(verifier, _sf(), _sf_type()) &&
           VerifyField<int32_t>(verifier, VT__CLOCK) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__TPBUFFER) &&
           verifier.VerifyTable(_tpBuffer()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__PREDERRORS) &&
           verifier.VerifyTable(_predErrors()) &&
           VerifyField<uint8_t>(verifier, VT__TPRESET) &&
           VerifyField<uint8_t>(verifier, VT__TPNEXTRESET) &&
           verifier.EndTable();
  }
};

struct FeatureHierarchyLayerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__sf_type(ogmaneo::schemas::SparseFeaturesType _sf_type) { fbb_.AddElement<uint8_t>(FeatureHierarchyLayer::VT__SF_TYPE, static_cast<uint8_t>(_sf_type), 0); }
  void add__sf(flatbuffers::Offset<void> _sf) { fbb_.AddOffset(FeatureHierarchyLayer::VT__SF, _sf); }
  void add__clock(int32_t _clock) { fbb_.AddElement<int32_t>(FeatureHierarchyLayer::VT__CLOCK, _clock, 0); }
  void add__tpBuffer(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _tpBuffer) { fbb_.AddOffset(FeatureHierarchyLayer::VT__TPBUFFER, _tpBuffer); }
  void add__predErrors(flatbuffers::Offset<ogmaneo::schemas::Image2D> _predErrors) { fbb_.AddOffset(FeatureHierarchyLayer::VT__PREDERRORS, _predErrors); }
  void add__tpReset(bool _tpReset) { fbb_.AddElement<uint8_t>(FeatureHierarchyLayer::VT__TPRESET, static_cast<uint8_t>(_tpReset), 0); }
  void add__tpNextReset(bool _tpNextReset) { fbb_.AddElement<uint8_t>(FeatureHierarchyLayer::VT__TPNEXTRESET, static_cast<uint8_t>(_tpNextReset), 0); }
  FeatureHierarchyLayerBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FeatureHierarchyLayerBuilder &operator=(const FeatureHierarchyLayerBuilder &);
  flatbuffers::Offset<FeatureHierarchyLayer> Finish() {
    auto o = flatbuffers::Offset<FeatureHierarchyLayer>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<FeatureHierarchyLayer> CreateFeatureHierarchyLayer(flatbuffers::FlatBufferBuilder &_fbb,
    ogmaneo::schemas::SparseFeaturesType _sf_type = ogmaneo::schemas::SparseFeaturesType_NONE,
    flatbuffers::Offset<void> _sf = 0,
    int32_t _clock = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _tpBuffer = 0,
    flatbuffers::Offset<ogmaneo::schemas::Image2D> _predErrors = 0,
    bool _tpReset = false,
    bool _tpNextReset = false) {
  FeatureHierarchyLayerBuilder builder_(_fbb);
  builder_.add__predErrors(_predErrors);
  builder_.add__tpBuffer(_tpBuffer);
  builder_.add__clock(_clock);
  builder_.add__sf(_sf);
  builder_.add__tpNextReset(_tpNextReset);
  builder_.add__tpReset(_tpReset);
  builder_.add__sf_type(_sf_type);
  return builder_.Finish();
}

struct FeatureHierarchy FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__LAYERDESCS = 4,
    VT__LAYERS = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<FeatureHierarchyLayerDesc>> *_layerDescs() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FeatureHierarchyLayerDesc>> *>(VT__LAYERDESCS); }
  flatbuffers::Vector<flatbuffers::Offset<FeatureHierarchyLayerDesc>> *mutable__layerDescs() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<FeatureHierarchyLayerDesc>> *>(VT__LAYERDESCS); }
  const flatbuffers::Vector<flatbuffers::Offset<FeatureHierarchyLayer>> *_layers() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FeatureHierarchyLayer>> *>(VT__LAYERS); }
  flatbuffers::Vector<flatbuffers::Offset<FeatureHierarchyLayer>> *mutable__layers() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<FeatureHierarchyLayer>> *>(VT__LAYERS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__LAYERDESCS) &&
           verifier.Verify(_layerDescs()) &&
           verifier.VerifyVectorOfTables(_layerDescs()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__LAYERS) &&
           verifier.Verify(_layers()) &&
           verifier.VerifyVectorOfTables(_layers()) &&
           verifier.EndTable();
  }
};

struct FeatureHierarchyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__layerDescs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FeatureHierarchyLayerDesc>>> _layerDescs) { fbb_.AddOffset(FeatureHierarchy::VT__LAYERDESCS, _layerDescs); }
  void add__layers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FeatureHierarchyLayer>>> _layers) { fbb_.AddOffset(FeatureHierarchy::VT__LAYERS, _layers); }
  FeatureHierarchyBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FeatureHierarchyBuilder &operator=(const FeatureHierarchyBuilder &);
  flatbuffers::Offset<FeatureHierarchy> Finish() {
    auto o = flatbuffers::Offset<FeatureHierarchy>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<FeatureHierarchy> CreateFeatureHierarchy(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FeatureHierarchyLayerDesc>>> _layerDescs = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FeatureHierarchyLayer>>> _layers = 0) {
  FeatureHierarchyBuilder builder_(_fbb);
  builder_.add__layers(_layers);
  builder_.add__layerDescs(_layerDescs);
  return builder_.Finish();
}

inline flatbuffers::Offset<FeatureHierarchy> CreateFeatureHierarchyDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<FeatureHierarchyLayerDesc>> *_layerDescs = nullptr,
    const std::vector<flatbuffers::Offset<FeatureHierarchyLayer>> *_layers = nullptr) {
  return CreateFeatureHierarchy(_fbb, _layerDescs ? _fbb.CreateVector<flatbuffers::Offset<FeatureHierarchyLayerDesc>>(*_layerDescs) : 0, _layers ? _fbb.CreateVector<flatbuffers::Offset<FeatureHierarchyLayer>>(*_layers) : 0);
}

}  // namespace schemas
}  // namespace ogmaneo

#endif  // FLATBUFFERS_GENERATED_FEATUREHIERARCHY_OGMANEO_SCHEMAS_H_
