// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SPARSEFEATURESDELAY_OGMANEO_SCHEMAS_H_
#define FLATBUFFERS_GENERATED_SPARSEFEATURESDELAY_OGMANEO_SCHEMAS_H_

#include "flatbuffers/flatbuffers.h"

#include "Helpers_generated.h"

namespace ogmaneo {
namespace schemas {

struct VisibleDelayLayerDesc;

struct VisibleDelayLayer;

struct SparseFeaturesDelayDesc;

struct SparseFeaturesDelay;

MANUALLY_ALIGNED_STRUCT(4) VisibleDelayLayerDesc FLATBUFFERS_FINAL_CLASS {
 private:
  ogmaneo::schemas::int2 _size_;
  int32_t _radius_;
  uint8_t _ignoreMiddle_;
  int8_t __padding0;
  int16_t __padding1;
  float _weightAlpha_;
  float _lambda_;
  float _gamma_;

 public:
  VisibleDelayLayerDesc() { memset(this, 0, sizeof(VisibleDelayLayerDesc)); }
  VisibleDelayLayerDesc(const VisibleDelayLayerDesc &_o) { memcpy(this, &_o, sizeof(VisibleDelayLayerDesc)); }
  VisibleDelayLayerDesc(const ogmaneo::schemas::int2 &__size, int32_t __radius, uint8_t __ignoreMiddle, float __weightAlpha, float __lambda, float __gamma)
    : _size_(__size), _radius_(flatbuffers::EndianScalar(__radius)), _ignoreMiddle_(flatbuffers::EndianScalar(__ignoreMiddle)), __padding0(0), __padding1(0), _weightAlpha_(flatbuffers::EndianScalar(__weightAlpha)), _lambda_(flatbuffers::EndianScalar(__lambda)), _gamma_(flatbuffers::EndianScalar(__gamma)) { (void)__padding0; (void)__padding1; }

  const ogmaneo::schemas::int2 &_size() const { return _size_; }
  ogmaneo::schemas::int2 &mutable__size() { return _size_; }
  int32_t _radius() const { return flatbuffers::EndianScalar(_radius_); }
  void mutate__radius(int32_t __radius) { flatbuffers::WriteScalar(&_radius_, __radius); }
  uint8_t _ignoreMiddle() const { return flatbuffers::EndianScalar(_ignoreMiddle_); }
  void mutate__ignoreMiddle(uint8_t __ignoreMiddle) { flatbuffers::WriteScalar(&_ignoreMiddle_, __ignoreMiddle); }
  float _weightAlpha() const { return flatbuffers::EndianScalar(_weightAlpha_); }
  void mutate__weightAlpha(float __weightAlpha) { flatbuffers::WriteScalar(&_weightAlpha_, __weightAlpha); }
  float _lambda() const { return flatbuffers::EndianScalar(_lambda_); }
  void mutate__lambda(float __lambda) { flatbuffers::WriteScalar(&_lambda_, __lambda); }
  float _gamma() const { return flatbuffers::EndianScalar(_gamma_); }
  void mutate__gamma(float __gamma) { flatbuffers::WriteScalar(&_gamma_, __gamma); }
};
STRUCT_END(VisibleDelayLayerDesc, 28);

struct VisibleDelayLayer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__DERIVEDINPUT = 4,
    VT__WEIGHTS = 6,
    VT__HIDDENTOVISIBLE = 8,
    VT__VISIBLETOHIDDEN = 10,
    VT__REVERSERADII = 12
  };
  const ogmaneo::schemas::DoubleBuffer2D *_derivedInput() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer2D *>(VT__DERIVEDINPUT); }
  ogmaneo::schemas::DoubleBuffer2D *mutable__derivedInput() { return GetPointer<ogmaneo::schemas::DoubleBuffer2D *>(VT__DERIVEDINPUT); }
  const ogmaneo::schemas::DoubleBuffer3D *_weights() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer3D *>(VT__WEIGHTS); }
  ogmaneo::schemas::DoubleBuffer3D *mutable__weights() { return GetPointer<ogmaneo::schemas::DoubleBuffer3D *>(VT__WEIGHTS); }
  const ogmaneo::schemas::float2 *_hiddenToVisible() const { return GetStruct<const ogmaneo::schemas::float2 *>(VT__HIDDENTOVISIBLE); }
  ogmaneo::schemas::float2 *mutable__hiddenToVisible() { return GetStruct<ogmaneo::schemas::float2 *>(VT__HIDDENTOVISIBLE); }
  const ogmaneo::schemas::float2 *_visibleToHidden() const { return GetStruct<const ogmaneo::schemas::float2 *>(VT__VISIBLETOHIDDEN); }
  ogmaneo::schemas::float2 *mutable__visibleToHidden() { return GetStruct<ogmaneo::schemas::float2 *>(VT__VISIBLETOHIDDEN); }
  const ogmaneo::schemas::int2 *_reverseRadii() const { return GetStruct<const ogmaneo::schemas::int2 *>(VT__REVERSERADII); }
  ogmaneo::schemas::int2 *mutable__reverseRadii() { return GetStruct<ogmaneo::schemas::int2 *>(VT__REVERSERADII); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__DERIVEDINPUT) &&
           verifier.VerifyTable(_derivedInput()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__WEIGHTS) &&
           verifier.VerifyTable(_weights()) &&
           VerifyField<ogmaneo::schemas::float2>(verifier, VT__HIDDENTOVISIBLE) &&
           VerifyField<ogmaneo::schemas::float2>(verifier, VT__VISIBLETOHIDDEN) &&
           VerifyField<ogmaneo::schemas::int2>(verifier, VT__REVERSERADII) &&
           verifier.EndTable();
  }
};

struct VisibleDelayLayerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__derivedInput(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _derivedInput) { fbb_.AddOffset(VisibleDelayLayer::VT__DERIVEDINPUT, _derivedInput); }
  void add__weights(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer3D> _weights) { fbb_.AddOffset(VisibleDelayLayer::VT__WEIGHTS, _weights); }
  void add__hiddenToVisible(const ogmaneo::schemas::float2 *_hiddenToVisible) { fbb_.AddStruct(VisibleDelayLayer::VT__HIDDENTOVISIBLE, _hiddenToVisible); }
  void add__visibleToHidden(const ogmaneo::schemas::float2 *_visibleToHidden) { fbb_.AddStruct(VisibleDelayLayer::VT__VISIBLETOHIDDEN, _visibleToHidden); }
  void add__reverseRadii(const ogmaneo::schemas::int2 *_reverseRadii) { fbb_.AddStruct(VisibleDelayLayer::VT__REVERSERADII, _reverseRadii); }
  VisibleDelayLayerBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  VisibleDelayLayerBuilder &operator=(const VisibleDelayLayerBuilder &);
  flatbuffers::Offset<VisibleDelayLayer> Finish() {
    auto o = flatbuffers::Offset<VisibleDelayLayer>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<VisibleDelayLayer> CreateVisibleDelayLayer(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _derivedInput = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer3D> _weights = 0,
    const ogmaneo::schemas::float2 *_hiddenToVisible = 0,
    const ogmaneo::schemas::float2 *_visibleToHidden = 0,
    const ogmaneo::schemas::int2 *_reverseRadii = 0) {
  VisibleDelayLayerBuilder builder_(_fbb);
  builder_.add__reverseRadii(_reverseRadii);
  builder_.add__visibleToHidden(_visibleToHidden);
  builder_.add__hiddenToVisible(_hiddenToVisible);
  builder_.add__weights(_weights);
  builder_.add__derivedInput(_derivedInput);
  return builder_.Finish();
}

struct SparseFeaturesDelayDesc FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__HIDDENSIZE = 4,
    VT__INHIBITIONRADIUS = 6,
    VT__BIASALPHA = 8,
    VT__ACTIVERATIO = 10,
    VT__INITWEIGHTRANGE = 12,
    VT__VISIBLELAYERDESCS = 14
  };
  const ogmaneo::schemas::int2 *_hiddenSize() const { return GetStruct<const ogmaneo::schemas::int2 *>(VT__HIDDENSIZE); }
  ogmaneo::schemas::int2 *mutable__hiddenSize() { return GetStruct<ogmaneo::schemas::int2 *>(VT__HIDDENSIZE); }
  int32_t _inhibitionRadius() const { return GetField<int32_t>(VT__INHIBITIONRADIUS, 0); }
  bool mutate__inhibitionRadius(int32_t __inhibitionRadius) { return SetField(VT__INHIBITIONRADIUS, __inhibitionRadius); }
  float _biasAlpha() const { return GetField<float>(VT__BIASALPHA, 0.0f); }
  bool mutate__biasAlpha(float __biasAlpha) { return SetField(VT__BIASALPHA, __biasAlpha); }
  float _activeRatio() const { return GetField<float>(VT__ACTIVERATIO, 0.0f); }
  bool mutate__activeRatio(float __activeRatio) { return SetField(VT__ACTIVERATIO, __activeRatio); }
  const ogmaneo::schemas::float2 *_initWeightRange() const { return GetStruct<const ogmaneo::schemas::float2 *>(VT__INITWEIGHTRANGE); }
  ogmaneo::schemas::float2 *mutable__initWeightRange() { return GetStruct<ogmaneo::schemas::float2 *>(VT__INITWEIGHTRANGE); }
  const flatbuffers::Vector<const VisibleDelayLayerDesc *> *_visibleLayerDescs() const { return GetPointer<const flatbuffers::Vector<const VisibleDelayLayerDesc *> *>(VT__VISIBLELAYERDESCS); }
  flatbuffers::Vector<const VisibleDelayLayerDesc *> *mutable__visibleLayerDescs() { return GetPointer<flatbuffers::Vector<const VisibleDelayLayerDesc *> *>(VT__VISIBLELAYERDESCS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<ogmaneo::schemas::int2>(verifier, VT__HIDDENSIZE) &&
           VerifyField<int32_t>(verifier, VT__INHIBITIONRADIUS) &&
           VerifyField<float>(verifier, VT__BIASALPHA) &&
           VerifyField<float>(verifier, VT__ACTIVERATIO) &&
           VerifyField<ogmaneo::schemas::float2>(verifier, VT__INITWEIGHTRANGE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__VISIBLELAYERDESCS) &&
           verifier.Verify(_visibleLayerDescs()) &&
           verifier.EndTable();
  }
};

struct SparseFeaturesDelayDescBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__hiddenSize(const ogmaneo::schemas::int2 *_hiddenSize) { fbb_.AddStruct(SparseFeaturesDelayDesc::VT__HIDDENSIZE, _hiddenSize); }
  void add__inhibitionRadius(int32_t _inhibitionRadius) { fbb_.AddElement<int32_t>(SparseFeaturesDelayDesc::VT__INHIBITIONRADIUS, _inhibitionRadius, 0); }
  void add__biasAlpha(float _biasAlpha) { fbb_.AddElement<float>(SparseFeaturesDelayDesc::VT__BIASALPHA, _biasAlpha, 0.0f); }
  void add__activeRatio(float _activeRatio) { fbb_.AddElement<float>(SparseFeaturesDelayDesc::VT__ACTIVERATIO, _activeRatio, 0.0f); }
  void add__initWeightRange(const ogmaneo::schemas::float2 *_initWeightRange) { fbb_.AddStruct(SparseFeaturesDelayDesc::VT__INITWEIGHTRANGE, _initWeightRange); }
  void add__visibleLayerDescs(flatbuffers::Offset<flatbuffers::Vector<const VisibleDelayLayerDesc *>> _visibleLayerDescs) { fbb_.AddOffset(SparseFeaturesDelayDesc::VT__VISIBLELAYERDESCS, _visibleLayerDescs); }
  SparseFeaturesDelayDescBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SparseFeaturesDelayDescBuilder &operator=(const SparseFeaturesDelayDescBuilder &);
  flatbuffers::Offset<SparseFeaturesDelayDesc> Finish() {
    auto o = flatbuffers::Offset<SparseFeaturesDelayDesc>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<SparseFeaturesDelayDesc> CreateSparseFeaturesDelayDesc(flatbuffers::FlatBufferBuilder &_fbb,
    const ogmaneo::schemas::int2 *_hiddenSize = 0,
    int32_t _inhibitionRadius = 0,
    float _biasAlpha = 0.0f,
    float _activeRatio = 0.0f,
    const ogmaneo::schemas::float2 *_initWeightRange = 0,
    flatbuffers::Offset<flatbuffers::Vector<const VisibleDelayLayerDesc *>> _visibleLayerDescs = 0) {
  SparseFeaturesDelayDescBuilder builder_(_fbb);
  builder_.add__visibleLayerDescs(_visibleLayerDescs);
  builder_.add__initWeightRange(_initWeightRange);
  builder_.add__activeRatio(_activeRatio);
  builder_.add__biasAlpha(_biasAlpha);
  builder_.add__inhibitionRadius(_inhibitionRadius);
  builder_.add__hiddenSize(_hiddenSize);
  return builder_.Finish();
}

inline flatbuffers::Offset<SparseFeaturesDelayDesc> CreateSparseFeaturesDelayDescDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const ogmaneo::schemas::int2 *_hiddenSize = 0,
    int32_t _inhibitionRadius = 0,
    float _biasAlpha = 0.0f,
    float _activeRatio = 0.0f,
    const ogmaneo::schemas::float2 *_initWeightRange = 0,
    const std::vector<const VisibleDelayLayerDesc *> *_visibleLayerDescs = nullptr) {
  return CreateSparseFeaturesDelayDesc(_fbb, _hiddenSize, _inhibitionRadius, _biasAlpha, _activeRatio, _initWeightRange, _visibleLayerDescs ? _fbb.CreateVector<const VisibleDelayLayerDesc *>(*_visibleLayerDescs) : 0);
}

struct SparseFeaturesDelay FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__HIDDENACTIVATIONS = 4,
    VT__HIDDENSTATES = 6,
    VT__HIDDENBIASES = 8,
    VT__HIDDENSIZE = 10,
    VT__INHIBITIONRADIUS = 12,
    VT__HIDDENSUMMATIONTEMP = 14,
    VT__BIASALPHA = 16,
    VT__ACTIVERATIO = 18,
    VT__VISIBLELAYERDESCS = 20,
    VT__VISIBLELAYERS = 22
  };
  const ogmaneo::schemas::DoubleBuffer2D *_hiddenActivations() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer2D *>(VT__HIDDENACTIVATIONS); }
  ogmaneo::schemas::DoubleBuffer2D *mutable__hiddenActivations() { return GetPointer<ogmaneo::schemas::DoubleBuffer2D *>(VT__HIDDENACTIVATIONS); }
  const ogmaneo::schemas::DoubleBuffer2D *_hiddenStates() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer2D *>(VT__HIDDENSTATES); }
  ogmaneo::schemas::DoubleBuffer2D *mutable__hiddenStates() { return GetPointer<ogmaneo::schemas::DoubleBuffer2D *>(VT__HIDDENSTATES); }
  const ogmaneo::schemas::DoubleBuffer2D *_hiddenBiases() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer2D *>(VT__HIDDENBIASES); }
  ogmaneo::schemas::DoubleBuffer2D *mutable__hiddenBiases() { return GetPointer<ogmaneo::schemas::DoubleBuffer2D *>(VT__HIDDENBIASES); }
  const ogmaneo::schemas::int2 *_hiddenSize() const { return GetStruct<const ogmaneo::schemas::int2 *>(VT__HIDDENSIZE); }
  ogmaneo::schemas::int2 *mutable__hiddenSize() { return GetStruct<ogmaneo::schemas::int2 *>(VT__HIDDENSIZE); }
  int32_t _inhibitionRadius() const { return GetField<int32_t>(VT__INHIBITIONRADIUS, 0); }
  bool mutate__inhibitionRadius(int32_t __inhibitionRadius) { return SetField(VT__INHIBITIONRADIUS, __inhibitionRadius); }
  const ogmaneo::schemas::DoubleBuffer2D *_hiddenSummationTemp() const { return GetPointer<const ogmaneo::schemas::DoubleBuffer2D *>(VT__HIDDENSUMMATIONTEMP); }
  ogmaneo::schemas::DoubleBuffer2D *mutable__hiddenSummationTemp() { return GetPointer<ogmaneo::schemas::DoubleBuffer2D *>(VT__HIDDENSUMMATIONTEMP); }
  float _biasAlpha() const { return GetField<float>(VT__BIASALPHA, 0.0f); }
  bool mutate__biasAlpha(float __biasAlpha) { return SetField(VT__BIASALPHA, __biasAlpha); }
  float _activeRatio() const { return GetField<float>(VT__ACTIVERATIO, 0.0f); }
  bool mutate__activeRatio(float __activeRatio) { return SetField(VT__ACTIVERATIO, __activeRatio); }
  const flatbuffers::Vector<const VisibleDelayLayerDesc *> *_visibleLayerDescs() const { return GetPointer<const flatbuffers::Vector<const VisibleDelayLayerDesc *> *>(VT__VISIBLELAYERDESCS); }
  flatbuffers::Vector<const VisibleDelayLayerDesc *> *mutable__visibleLayerDescs() { return GetPointer<flatbuffers::Vector<const VisibleDelayLayerDesc *> *>(VT__VISIBLELAYERDESCS); }
  const flatbuffers::Vector<flatbuffers::Offset<VisibleDelayLayer>> *_visibleLayers() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<VisibleDelayLayer>> *>(VT__VISIBLELAYERS); }
  flatbuffers::Vector<flatbuffers::Offset<VisibleDelayLayer>> *mutable__visibleLayers() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<VisibleDelayLayer>> *>(VT__VISIBLELAYERS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__HIDDENACTIVATIONS) &&
           verifier.VerifyTable(_hiddenActivations()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__HIDDENSTATES) &&
           verifier.VerifyTable(_hiddenStates()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__HIDDENBIASES) &&
           verifier.VerifyTable(_hiddenBiases()) &&
           VerifyField<ogmaneo::schemas::int2>(verifier, VT__HIDDENSIZE) &&
           VerifyField<int32_t>(verifier, VT__INHIBITIONRADIUS) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__HIDDENSUMMATIONTEMP) &&
           verifier.VerifyTable(_hiddenSummationTemp()) &&
           VerifyField<float>(verifier, VT__BIASALPHA) &&
           VerifyField<float>(verifier, VT__ACTIVERATIO) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__VISIBLELAYERDESCS) &&
           verifier.Verify(_visibleLayerDescs()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__VISIBLELAYERS) &&
           verifier.Verify(_visibleLayers()) &&
           verifier.VerifyVectorOfTables(_visibleLayers()) &&
           verifier.EndTable();
  }
};

struct SparseFeaturesDelayBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__hiddenActivations(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenActivations) { fbb_.AddOffset(SparseFeaturesDelay::VT__HIDDENACTIVATIONS, _hiddenActivations); }
  void add__hiddenStates(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenStates) { fbb_.AddOffset(SparseFeaturesDelay::VT__HIDDENSTATES, _hiddenStates); }
  void add__hiddenBiases(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenBiases) { fbb_.AddOffset(SparseFeaturesDelay::VT__HIDDENBIASES, _hiddenBiases); }
  void add__hiddenSize(const ogmaneo::schemas::int2 *_hiddenSize) { fbb_.AddStruct(SparseFeaturesDelay::VT__HIDDENSIZE, _hiddenSize); }
  void add__inhibitionRadius(int32_t _inhibitionRadius) { fbb_.AddElement<int32_t>(SparseFeaturesDelay::VT__INHIBITIONRADIUS, _inhibitionRadius, 0); }
  void add__hiddenSummationTemp(flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenSummationTemp) { fbb_.AddOffset(SparseFeaturesDelay::VT__HIDDENSUMMATIONTEMP, _hiddenSummationTemp); }
  void add__biasAlpha(float _biasAlpha) { fbb_.AddElement<float>(SparseFeaturesDelay::VT__BIASALPHA, _biasAlpha, 0.0f); }
  void add__activeRatio(float _activeRatio) { fbb_.AddElement<float>(SparseFeaturesDelay::VT__ACTIVERATIO, _activeRatio, 0.0f); }
  void add__visibleLayerDescs(flatbuffers::Offset<flatbuffers::Vector<const VisibleDelayLayerDesc *>> _visibleLayerDescs) { fbb_.AddOffset(SparseFeaturesDelay::VT__VISIBLELAYERDESCS, _visibleLayerDescs); }
  void add__visibleLayers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VisibleDelayLayer>>> _visibleLayers) { fbb_.AddOffset(SparseFeaturesDelay::VT__VISIBLELAYERS, _visibleLayers); }
  SparseFeaturesDelayBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SparseFeaturesDelayBuilder &operator=(const SparseFeaturesDelayBuilder &);
  flatbuffers::Offset<SparseFeaturesDelay> Finish() {
    auto o = flatbuffers::Offset<SparseFeaturesDelay>(fbb_.EndTable(start_, 10));
    return o;
  }
};

inline flatbuffers::Offset<SparseFeaturesDelay> CreateSparseFeaturesDelay(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenActivations = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenStates = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenBiases = 0,
    const ogmaneo::schemas::int2 *_hiddenSize = 0,
    int32_t _inhibitionRadius = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenSummationTemp = 0,
    float _biasAlpha = 0.0f,
    float _activeRatio = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<const VisibleDelayLayerDesc *>> _visibleLayerDescs = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VisibleDelayLayer>>> _visibleLayers = 0) {
  SparseFeaturesDelayBuilder builder_(_fbb);
  builder_.add__visibleLayers(_visibleLayers);
  builder_.add__visibleLayerDescs(_visibleLayerDescs);
  builder_.add__activeRatio(_activeRatio);
  builder_.add__biasAlpha(_biasAlpha);
  builder_.add__hiddenSummationTemp(_hiddenSummationTemp);
  builder_.add__inhibitionRadius(_inhibitionRadius);
  builder_.add__hiddenSize(_hiddenSize);
  builder_.add__hiddenBiases(_hiddenBiases);
  builder_.add__hiddenStates(_hiddenStates);
  builder_.add__hiddenActivations(_hiddenActivations);
  return builder_.Finish();
}

inline flatbuffers::Offset<SparseFeaturesDelay> CreateSparseFeaturesDelayDirect(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenActivations = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenStates = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenBiases = 0,
    const ogmaneo::schemas::int2 *_hiddenSize = 0,
    int32_t _inhibitionRadius = 0,
    flatbuffers::Offset<ogmaneo::schemas::DoubleBuffer2D> _hiddenSummationTemp = 0,
    float _biasAlpha = 0.0f,
    float _activeRatio = 0.0f,
    const std::vector<const VisibleDelayLayerDesc *> *_visibleLayerDescs = nullptr,
    const std::vector<flatbuffers::Offset<VisibleDelayLayer>> *_visibleLayers = nullptr) {
  return CreateSparseFeaturesDelay(_fbb, _hiddenActivations, _hiddenStates, _hiddenBiases, _hiddenSize, _inhibitionRadius, _hiddenSummationTemp, _biasAlpha, _activeRatio, _visibleLayerDescs ? _fbb.CreateVector<const VisibleDelayLayerDesc *>(*_visibleLayerDescs) : 0, _visibleLayers ? _fbb.CreateVector<flatbuffers::Offset<VisibleDelayLayer>>(*_visibleLayers) : 0);
}

}  // namespace schemas
}  // namespace ogmaneo

#endif  // FLATBUFFERS_GENERATED_SPARSEFEATURESDELAY_OGMANEO_SCHEMAS_H_
