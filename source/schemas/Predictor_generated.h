// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PREDICTOR_OGMANEO_SCHEMAS_H_
#define FLATBUFFERS_GENERATED_PREDICTOR_OGMANEO_SCHEMAS_H_

#include "flatbuffers/flatbuffers.h"

#include "FeatureHierarchy_generated.h"
#include "Helpers_generated.h"
#include "PredictorLayer_generated.h"
#include "SparseFeatures_generated.h"
#include "SparseFeaturesChunk_generated.h"
#include "SparseFeaturesDelay_generated.h"
#include "SparseFeaturesSTDP_generated.h"

namespace ogmaneo {
namespace schemas {

struct PredLayerDesc;

struct Predictor;

MANUALLY_ALIGNED_STRUCT(4) PredLayerDesc FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t _radius_;
  float _alpha_;
  float _beta_;

 public:
  PredLayerDesc() { memset(this, 0, sizeof(PredLayerDesc)); }
  PredLayerDesc(const PredLayerDesc &_o) { memcpy(this, &_o, sizeof(PredLayerDesc)); }
  PredLayerDesc(int32_t __radius, float __alpha, float __beta)
    : _radius_(flatbuffers::EndianScalar(__radius)), _alpha_(flatbuffers::EndianScalar(__alpha)), _beta_(flatbuffers::EndianScalar(__beta)) { }

  int32_t _radius() const { return flatbuffers::EndianScalar(_radius_); }
  void mutate__radius(int32_t __radius) { flatbuffers::WriteScalar(&_radius_, __radius); }
  float _alpha() const { return flatbuffers::EndianScalar(_alpha_); }
  void mutate__alpha(float __alpha) { flatbuffers::WriteScalar(&_alpha_, __alpha); }
  float _beta() const { return flatbuffers::EndianScalar(_beta_); }
  void mutate__beta(float __beta) { flatbuffers::WriteScalar(&_beta_, __beta); }
};
STRUCT_END(PredLayerDesc, 12);

struct Predictor FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__H = 4,
    VT__PLAYERDESCS = 6,
    VT__PLAYERS = 8
  };
  const ogmaneo::schemas::FeatureHierarchy *_h() const { return GetPointer<const ogmaneo::schemas::FeatureHierarchy *>(VT__H); }
  ogmaneo::schemas::FeatureHierarchy *mutable__h() { return GetPointer<ogmaneo::schemas::FeatureHierarchy *>(VT__H); }
  const flatbuffers::Vector<const PredLayerDesc *> *_pLayerDescs() const { return GetPointer<const flatbuffers::Vector<const PredLayerDesc *> *>(VT__PLAYERDESCS); }
  flatbuffers::Vector<const PredLayerDesc *> *mutable__pLayerDescs() { return GetPointer<flatbuffers::Vector<const PredLayerDesc *> *>(VT__PLAYERDESCS); }
  const flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::PredictorLayer>> *_pLayers() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::PredictorLayer>> *>(VT__PLAYERS); }
  flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::PredictorLayer>> *mutable__pLayers() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::PredictorLayer>> *>(VT__PLAYERS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__H) &&
           verifier.VerifyTable(_h()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__PLAYERDESCS) &&
           verifier.Verify(_pLayerDescs()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__PLAYERS) &&
           verifier.Verify(_pLayers()) &&
           verifier.VerifyVectorOfTables(_pLayers()) &&
           verifier.EndTable();
  }
};

struct PredictorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__h(flatbuffers::Offset<ogmaneo::schemas::FeatureHierarchy> _h) { fbb_.AddOffset(Predictor::VT__H, _h); }
  void add__pLayerDescs(flatbuffers::Offset<flatbuffers::Vector<const PredLayerDesc *>> _pLayerDescs) { fbb_.AddOffset(Predictor::VT__PLAYERDESCS, _pLayerDescs); }
  void add__pLayers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::PredictorLayer>>> _pLayers) { fbb_.AddOffset(Predictor::VT__PLAYERS, _pLayers); }
  PredictorBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PredictorBuilder &operator=(const PredictorBuilder &);
  flatbuffers::Offset<Predictor> Finish() {
    auto o = flatbuffers::Offset<Predictor>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Predictor> CreatePredictor(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ogmaneo::schemas::FeatureHierarchy> _h = 0,
    flatbuffers::Offset<flatbuffers::Vector<const PredLayerDesc *>> _pLayerDescs = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::PredictorLayer>>> _pLayers = 0) {
  PredictorBuilder builder_(_fbb);
  builder_.add__pLayers(_pLayers);
  builder_.add__pLayerDescs(_pLayerDescs);
  builder_.add__h(_h);
  return builder_.Finish();
}

inline flatbuffers::Offset<Predictor> CreatePredictorDirect(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ogmaneo::schemas::FeatureHierarchy> _h = 0,
    const std::vector<const PredLayerDesc *> *_pLayerDescs = nullptr,
    const std::vector<flatbuffers::Offset<ogmaneo::schemas::PredictorLayer>> *_pLayers = nullptr) {
  return CreatePredictor(_fbb, _h, _pLayerDescs ? _fbb.CreateVector<const PredLayerDesc *>(*_pLayerDescs) : 0, _pLayers ? _fbb.CreateVector<flatbuffers::Offset<ogmaneo::schemas::PredictorLayer>>(*_pLayers) : 0);
}

}  // namespace schemas
}  // namespace ogmaneo

#endif  // FLATBUFFERS_GENERATED_PREDICTOR_OGMANEO_SCHEMAS_H_
