// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_AGENT_OGMANEO_SCHEMAS_H_
#define FLATBUFFERS_GENERATED_AGENT_OGMANEO_SCHEMAS_H_

#include "flatbuffers/flatbuffers.h"

#include "AgentLayer_generated.h"
#include "AgentSwarm_generated.h"
#include "FeatureHierarchy_generated.h"
#include "Helpers_generated.h"
#include "Predictor_generated.h"
#include "PredictorLayer_generated.h"
#include "SparseFeatures_generated.h"
#include "SparseFeaturesChunk_generated.h"
#include "SparseFeaturesDelay_generated.h"
#include "SparseFeaturesSTDP_generated.h"

namespace ogmaneo {
namespace schemas {

struct Agent;

struct Agent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__AS = 4,
    VT__INPUTIMAGES = 6,
    VT__ACTIONS = 8
  };
  const ogmaneo::schemas::AgentSwarm *_as() const { return GetPointer<const ogmaneo::schemas::AgentSwarm *>(VT__AS); }
  ogmaneo::schemas::AgentSwarm *mutable__as() { return GetPointer<ogmaneo::schemas::AgentSwarm *>(VT__AS); }
  const flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>> *_inputImages() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>> *>(VT__INPUTIMAGES); }
  flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>> *mutable__inputImages() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>> *>(VT__INPUTIMAGES); }
  const flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::ValueField2D>> *_actions() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::ValueField2D>> *>(VT__ACTIONS); }
  flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::ValueField2D>> *mutable__actions() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::ValueField2D>> *>(VT__ACTIONS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__AS) &&
           verifier.VerifyTable(_as()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__INPUTIMAGES) &&
           verifier.Verify(_inputImages()) &&
           verifier.VerifyVectorOfTables(_inputImages()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__ACTIONS) &&
           verifier.Verify(_actions()) &&
           verifier.VerifyVectorOfTables(_actions()) &&
           verifier.EndTable();
  }
};

struct AgentBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__as(flatbuffers::Offset<ogmaneo::schemas::AgentSwarm> _as) { fbb_.AddOffset(Agent::VT__AS, _as); }
  void add__inputImages(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>>> _inputImages) { fbb_.AddOffset(Agent::VT__INPUTIMAGES, _inputImages); }
  void add__actions(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::ValueField2D>>> _actions) { fbb_.AddOffset(Agent::VT__ACTIONS, _actions); }
  AgentBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AgentBuilder &operator=(const AgentBuilder &);
  flatbuffers::Offset<Agent> Finish() {
    auto o = flatbuffers::Offset<Agent>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Agent> CreateAgent(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ogmaneo::schemas::AgentSwarm> _as = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>>> _inputImages = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::ValueField2D>>> _actions = 0) {
  AgentBuilder builder_(_fbb);
  builder_.add__actions(_actions);
  builder_.add__inputImages(_inputImages);
  builder_.add__as(_as);
  return builder_.Finish();
}

inline flatbuffers::Offset<Agent> CreateAgentDirect(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ogmaneo::schemas::AgentSwarm> _as = 0,
    const std::vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>> *_inputImages = nullptr,
    const std::vector<flatbuffers::Offset<ogmaneo::schemas::ValueField2D>> *_actions = nullptr) {
  return CreateAgent(_fbb, _as, _inputImages ? _fbb.CreateVector<flatbuffers::Offset<ogmaneo::schemas::Image2D>>(*_inputImages) : 0, _actions ? _fbb.CreateVector<flatbuffers::Offset<ogmaneo::schemas::ValueField2D>>(*_actions) : 0);
}

inline const ogmaneo::schemas::Agent *GetAgent(const void *buf) {
  return flatbuffers::GetRoot<ogmaneo::schemas::Agent>(buf);
}

inline Agent *GetMutableAgent(void *buf) {
  return flatbuffers::GetMutableRoot<Agent>(buf);
}

inline const char *AgentIdentifier() {
  return "OAGT";
}

inline bool AgentBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(buf, AgentIdentifier());
}

inline bool VerifyAgentBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ogmaneo::schemas::Agent>(AgentIdentifier());
}

inline const char *AgentExtension() { return "oag"; }

inline void FinishAgentBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<ogmaneo::schemas::Agent> root) {
  fbb.Finish(root, AgentIdentifier());
}

}  // namespace schemas
}  // namespace ogmaneo

#endif  // FLATBUFFERS_GENERATED_AGENT_OGMANEO_SCHEMAS_H_
