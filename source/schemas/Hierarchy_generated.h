// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_HIERARCHY_OGMANEO_SCHEMAS_H_
#define FLATBUFFERS_GENERATED_HIERARCHY_OGMANEO_SCHEMAS_H_

#include "flatbuffers/flatbuffers.h"

#include "FeatureHierarchy_generated.h"
#include "Helpers_generated.h"
#include "Predictor_generated.h"
#include "PredictorLayer_generated.h"
#include "SparseFeatures_generated.h"
#include "SparseFeaturesChunk_generated.h"
#include "SparseFeaturesDelay_generated.h"
#include "SparseFeaturesSTDP_generated.h"

namespace ogmaneo {
namespace schemas {

struct Hierarchy;

struct Hierarchy FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__P = 4,
    VT__INPUTIMAGES = 6,
    VT__PREDICTIONS = 8,
    VT__READOUTLAYERS = 10
  };
  const ogmaneo::schemas::Predictor *_p() const { return GetPointer<const ogmaneo::schemas::Predictor *>(VT__P); }
  ogmaneo::schemas::Predictor *mutable__p() { return GetPointer<ogmaneo::schemas::Predictor *>(VT__P); }
  const flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>> *_inputImages() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>> *>(VT__INPUTIMAGES); }
  flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>> *mutable__inputImages() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>> *>(VT__INPUTIMAGES); }
  const flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::ValueField2D>> *_predictions() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::ValueField2D>> *>(VT__PREDICTIONS); }
  flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::ValueField2D>> *mutable__predictions() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::ValueField2D>> *>(VT__PREDICTIONS); }
  const flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::PredictorLayer>> *_readoutLayers() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::PredictorLayer>> *>(VT__READOUTLAYERS); }
  flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::PredictorLayer>> *mutable__readoutLayers() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::PredictorLayer>> *>(VT__READOUTLAYERS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__P) &&
           verifier.VerifyTable(_p()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__INPUTIMAGES) &&
           verifier.Verify(_inputImages()) &&
           verifier.VerifyVectorOfTables(_inputImages()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__PREDICTIONS) &&
           verifier.Verify(_predictions()) &&
           verifier.VerifyVectorOfTables(_predictions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__READOUTLAYERS) &&
           verifier.Verify(_readoutLayers()) &&
           verifier.VerifyVectorOfTables(_readoutLayers()) &&
           verifier.EndTable();
  }
};

struct HierarchyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__p(flatbuffers::Offset<ogmaneo::schemas::Predictor> _p) { fbb_.AddOffset(Hierarchy::VT__P, _p); }
  void add__inputImages(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>>> _inputImages) { fbb_.AddOffset(Hierarchy::VT__INPUTIMAGES, _inputImages); }
  void add__predictions(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::ValueField2D>>> _predictions) { fbb_.AddOffset(Hierarchy::VT__PREDICTIONS, _predictions); }
  void add__readoutLayers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::PredictorLayer>>> _readoutLayers) { fbb_.AddOffset(Hierarchy::VT__READOUTLAYERS, _readoutLayers); }
  HierarchyBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  HierarchyBuilder &operator=(const HierarchyBuilder &);
  flatbuffers::Offset<Hierarchy> Finish() {
    auto o = flatbuffers::Offset<Hierarchy>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<Hierarchy> CreateHierarchy(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ogmaneo::schemas::Predictor> _p = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>>> _inputImages = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::ValueField2D>>> _predictions = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::PredictorLayer>>> _readoutLayers = 0) {
  HierarchyBuilder builder_(_fbb);
  builder_.add__readoutLayers(_readoutLayers);
  builder_.add__predictions(_predictions);
  builder_.add__inputImages(_inputImages);
  builder_.add__p(_p);
  return builder_.Finish();
}

inline flatbuffers::Offset<Hierarchy> CreateHierarchyDirect(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ogmaneo::schemas::Predictor> _p = 0,
    const std::vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>> *_inputImages = nullptr,
    const std::vector<flatbuffers::Offset<ogmaneo::schemas::ValueField2D>> *_predictions = nullptr,
    const std::vector<flatbuffers::Offset<ogmaneo::schemas::PredictorLayer>> *_readoutLayers = nullptr) {
  return CreateHierarchy(_fbb, _p, _inputImages ? _fbb.CreateVector<flatbuffers::Offset<ogmaneo::schemas::Image2D>>(*_inputImages) : 0, _predictions ? _fbb.CreateVector<flatbuffers::Offset<ogmaneo::schemas::ValueField2D>>(*_predictions) : 0, _readoutLayers ? _fbb.CreateVector<flatbuffers::Offset<ogmaneo::schemas::PredictorLayer>>(*_readoutLayers) : 0);
}

inline const ogmaneo::schemas::Hierarchy *GetHierarchy(const void *buf) {
  return flatbuffers::GetRoot<ogmaneo::schemas::Hierarchy>(buf);
}

inline Hierarchy *GetMutableHierarchy(void *buf) {
  return flatbuffers::GetMutableRoot<Hierarchy>(buf);
}

inline const char *HierarchyIdentifier() {
  return "OHRY";
}

inline bool HierarchyBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(buf, HierarchyIdentifier());
}

inline bool VerifyHierarchyBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ogmaneo::schemas::Hierarchy>(HierarchyIdentifier());
}

inline const char *HierarchyExtension() { return "ohr"; }

inline void FinishHierarchyBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<ogmaneo::schemas::Hierarchy> root) {
  fbb.Finish(root, HierarchyIdentifier());
}

}  // namespace schemas
}  // namespace ogmaneo

#endif  // FLATBUFFERS_GENERATED_HIERARCHY_OGMANEO_SCHEMAS_H_
