// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_AGENTSWARM_OGMANEO_SCHEMAS_H_
#define FLATBUFFERS_GENERATED_AGENTSWARM_OGMANEO_SCHEMAS_H_

#include "flatbuffers/flatbuffers.h"

#include "AgentLayer_generated.h"
#include "FeatureHierarchy_generated.h"
#include "Helpers_generated.h"
#include "Predictor_generated.h"
#include "PredictorLayer_generated.h"
#include "SparseFeatures_generated.h"
#include "SparseFeaturesChunk_generated.h"
#include "SparseFeaturesDelay_generated.h"
#include "SparseFeaturesSTDP_generated.h"

namespace ogmaneo {
namespace schemas {

struct AgentSwarmLayerDesc;

struct AgentSwarmLayerDescs;

struct AgentSwarmLayers;

struct AgentSwarm;

struct AgentSwarmLayerDesc FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__RADIUS = 4,
    VT__QALPHA = 6,
    VT__ACTIONALPHA = 8,
    VT__QGAMMA = 10,
    VT__QLAMBDA = 12,
    VT__ACTIONLAMBDA = 14,
    VT__MAXACTIONWEIGHTMAG = 16
  };
  int32_t _radius() const { return GetField<int32_t>(VT__RADIUS, 0); }
  bool mutate__radius(int32_t __radius) { return SetField(VT__RADIUS, __radius); }
  float _qAlpha() const { return GetField<float>(VT__QALPHA, 0.0f); }
  bool mutate__qAlpha(float __qAlpha) { return SetField(VT__QALPHA, __qAlpha); }
  float _actionAlpha() const { return GetField<float>(VT__ACTIONALPHA, 0.0f); }
  bool mutate__actionAlpha(float __actionAlpha) { return SetField(VT__ACTIONALPHA, __actionAlpha); }
  float _qGamma() const { return GetField<float>(VT__QGAMMA, 0.0f); }
  bool mutate__qGamma(float __qGamma) { return SetField(VT__QGAMMA, __qGamma); }
  float _qLambda() const { return GetField<float>(VT__QLAMBDA, 0.0f); }
  bool mutate__qLambda(float __qLambda) { return SetField(VT__QLAMBDA, __qLambda); }
  float _actionLambda() const { return GetField<float>(VT__ACTIONLAMBDA, 0.0f); }
  bool mutate__actionLambda(float __actionLambda) { return SetField(VT__ACTIONLAMBDA, __actionLambda); }
  float _maxActionWeightMag() const { return GetField<float>(VT__MAXACTIONWEIGHTMAG, 0.0f); }
  bool mutate__maxActionWeightMag(float __maxActionWeightMag) { return SetField(VT__MAXACTIONWEIGHTMAG, __maxActionWeightMag); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT__RADIUS) &&
           VerifyField<float>(verifier, VT__QALPHA) &&
           VerifyField<float>(verifier, VT__ACTIONALPHA) &&
           VerifyField<float>(verifier, VT__QGAMMA) &&
           VerifyField<float>(verifier, VT__QLAMBDA) &&
           VerifyField<float>(verifier, VT__ACTIONLAMBDA) &&
           VerifyField<float>(verifier, VT__MAXACTIONWEIGHTMAG) &&
           verifier.EndTable();
  }
};

struct AgentSwarmLayerDescBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__radius(int32_t _radius) { fbb_.AddElement<int32_t>(AgentSwarmLayerDesc::VT__RADIUS, _radius, 0); }
  void add__qAlpha(float _qAlpha) { fbb_.AddElement<float>(AgentSwarmLayerDesc::VT__QALPHA, _qAlpha, 0.0f); }
  void add__actionAlpha(float _actionAlpha) { fbb_.AddElement<float>(AgentSwarmLayerDesc::VT__ACTIONALPHA, _actionAlpha, 0.0f); }
  void add__qGamma(float _qGamma) { fbb_.AddElement<float>(AgentSwarmLayerDesc::VT__QGAMMA, _qGamma, 0.0f); }
  void add__qLambda(float _qLambda) { fbb_.AddElement<float>(AgentSwarmLayerDesc::VT__QLAMBDA, _qLambda, 0.0f); }
  void add__actionLambda(float _actionLambda) { fbb_.AddElement<float>(AgentSwarmLayerDesc::VT__ACTIONLAMBDA, _actionLambda, 0.0f); }
  void add__maxActionWeightMag(float _maxActionWeightMag) { fbb_.AddElement<float>(AgentSwarmLayerDesc::VT__MAXACTIONWEIGHTMAG, _maxActionWeightMag, 0.0f); }
  AgentSwarmLayerDescBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AgentSwarmLayerDescBuilder &operator=(const AgentSwarmLayerDescBuilder &);
  flatbuffers::Offset<AgentSwarmLayerDesc> Finish() {
    auto o = flatbuffers::Offset<AgentSwarmLayerDesc>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<AgentSwarmLayerDesc> CreateAgentSwarmLayerDesc(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t _radius = 0,
    float _qAlpha = 0.0f,
    float _actionAlpha = 0.0f,
    float _qGamma = 0.0f,
    float _qLambda = 0.0f,
    float _actionLambda = 0.0f,
    float _maxActionWeightMag = 0.0f) {
  AgentSwarmLayerDescBuilder builder_(_fbb);
  builder_.add__maxActionWeightMag(_maxActionWeightMag);
  builder_.add__actionLambda(_actionLambda);
  builder_.add__qLambda(_qLambda);
  builder_.add__qGamma(_qGamma);
  builder_.add__actionAlpha(_actionAlpha);
  builder_.add__qAlpha(_qAlpha);
  builder_.add__radius(_radius);
  return builder_.Finish();
}

struct AgentSwarmLayerDescs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__LAYERDESCS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayerDesc>> *_layerDescs() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayerDesc>> *>(VT__LAYERDESCS); }
  flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayerDesc>> *mutable__layerDescs() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayerDesc>> *>(VT__LAYERDESCS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__LAYERDESCS) &&
           verifier.Verify(_layerDescs()) &&
           verifier.VerifyVectorOfTables(_layerDescs()) &&
           verifier.EndTable();
  }
};

struct AgentSwarmLayerDescsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__layerDescs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayerDesc>>> _layerDescs) { fbb_.AddOffset(AgentSwarmLayerDescs::VT__LAYERDESCS, _layerDescs); }
  AgentSwarmLayerDescsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AgentSwarmLayerDescsBuilder &operator=(const AgentSwarmLayerDescsBuilder &);
  flatbuffers::Offset<AgentSwarmLayerDescs> Finish() {
    auto o = flatbuffers::Offset<AgentSwarmLayerDescs>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<AgentSwarmLayerDescs> CreateAgentSwarmLayerDescs(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayerDesc>>> _layerDescs = 0) {
  AgentSwarmLayerDescsBuilder builder_(_fbb);
  builder_.add__layerDescs(_layerDescs);
  return builder_.Finish();
}

inline flatbuffers::Offset<AgentSwarmLayerDescs> CreateAgentSwarmLayerDescsDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<AgentSwarmLayerDesc>> *_layerDescs = nullptr) {
  return CreateAgentSwarmLayerDescs(_fbb, _layerDescs ? _fbb.CreateVector<flatbuffers::Offset<AgentSwarmLayerDesc>>(*_layerDescs) : 0);
}

struct AgentSwarmLayers FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__LAYERS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::AgentLayer>> *_layers() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::AgentLayer>> *>(VT__LAYERS); }
  flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::AgentLayer>> *mutable__layers() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::AgentLayer>> *>(VT__LAYERS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__LAYERS) &&
           verifier.Verify(_layers()) &&
           verifier.VerifyVectorOfTables(_layers()) &&
           verifier.EndTable();
  }
};

struct AgentSwarmLayersBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__layers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::AgentLayer>>> _layers) { fbb_.AddOffset(AgentSwarmLayers::VT__LAYERS, _layers); }
  AgentSwarmLayersBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AgentSwarmLayersBuilder &operator=(const AgentSwarmLayersBuilder &);
  flatbuffers::Offset<AgentSwarmLayers> Finish() {
    auto o = flatbuffers::Offset<AgentSwarmLayers>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<AgentSwarmLayers> CreateAgentSwarmLayers(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::AgentLayer>>> _layers = 0) {
  AgentSwarmLayersBuilder builder_(_fbb);
  builder_.add__layers(_layers);
  return builder_.Finish();
}

inline flatbuffers::Offset<AgentSwarmLayers> CreateAgentSwarmLayersDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<ogmaneo::schemas::AgentLayer>> *_layers = nullptr) {
  return CreateAgentSwarmLayers(_fbb, _layers ? _fbb.CreateVector<flatbuffers::Offset<ogmaneo::schemas::AgentLayer>>(*_layers) : 0);
}

struct AgentSwarm FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT__P = 4,
    VT__ALAYERS = 6,
    VT__ALAYERDESCS = 8,
    VT__REWARDSUMS = 10,
    VT__REWARDCOUNTS = 12,
    VT__ONES = 14
  };
  const ogmaneo::schemas::Predictor *_p() const { return GetPointer<const ogmaneo::schemas::Predictor *>(VT__P); }
  ogmaneo::schemas::Predictor *mutable__p() { return GetPointer<ogmaneo::schemas::Predictor *>(VT__P); }
  const flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayers>> *_aLayers() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayers>> *>(VT__ALAYERS); }
  flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayers>> *mutable__aLayers() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayers>> *>(VT__ALAYERS); }
  const flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayerDescs>> *_aLayerDescs() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayerDescs>> *>(VT__ALAYERDESCS); }
  flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayerDescs>> *mutable__aLayerDescs() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayerDescs>> *>(VT__ALAYERDESCS); }
  const flatbuffers::Vector<float> *_rewardSums() const { return GetPointer<const flatbuffers::Vector<float> *>(VT__REWARDSUMS); }
  flatbuffers::Vector<float> *mutable__rewardSums() { return GetPointer<flatbuffers::Vector<float> *>(VT__REWARDSUMS); }
  const flatbuffers::Vector<float> *_rewardCounts() const { return GetPointer<const flatbuffers::Vector<float> *>(VT__REWARDCOUNTS); }
  flatbuffers::Vector<float> *mutable__rewardCounts() { return GetPointer<flatbuffers::Vector<float> *>(VT__REWARDCOUNTS); }
  const flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>> *_ones() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>> *>(VT__ONES); }
  flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>> *mutable__ones() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>> *>(VT__ONES); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__P) &&
           verifier.VerifyTable(_p()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__ALAYERS) &&
           verifier.Verify(_aLayers()) &&
           verifier.VerifyVectorOfTables(_aLayers()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__ALAYERDESCS) &&
           verifier.Verify(_aLayerDescs()) &&
           verifier.VerifyVectorOfTables(_aLayerDescs()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__REWARDSUMS) &&
           verifier.Verify(_rewardSums()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__REWARDCOUNTS) &&
           verifier.Verify(_rewardCounts()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT__ONES) &&
           verifier.Verify(_ones()) &&
           verifier.VerifyVectorOfTables(_ones()) &&
           verifier.EndTable();
  }
};

struct AgentSwarmBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__p(flatbuffers::Offset<ogmaneo::schemas::Predictor> _p) { fbb_.AddOffset(AgentSwarm::VT__P, _p); }
  void add__aLayers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayers>>> _aLayers) { fbb_.AddOffset(AgentSwarm::VT__ALAYERS, _aLayers); }
  void add__aLayerDescs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayerDescs>>> _aLayerDescs) { fbb_.AddOffset(AgentSwarm::VT__ALAYERDESCS, _aLayerDescs); }
  void add__rewardSums(flatbuffers::Offset<flatbuffers::Vector<float>> _rewardSums) { fbb_.AddOffset(AgentSwarm::VT__REWARDSUMS, _rewardSums); }
  void add__rewardCounts(flatbuffers::Offset<flatbuffers::Vector<float>> _rewardCounts) { fbb_.AddOffset(AgentSwarm::VT__REWARDCOUNTS, _rewardCounts); }
  void add__ones(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>>> _ones) { fbb_.AddOffset(AgentSwarm::VT__ONES, _ones); }
  AgentSwarmBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AgentSwarmBuilder &operator=(const AgentSwarmBuilder &);
  flatbuffers::Offset<AgentSwarm> Finish() {
    auto o = flatbuffers::Offset<AgentSwarm>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<AgentSwarm> CreateAgentSwarm(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ogmaneo::schemas::Predictor> _p = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayers>>> _aLayers = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AgentSwarmLayerDescs>>> _aLayerDescs = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> _rewardSums = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> _rewardCounts = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>>> _ones = 0) {
  AgentSwarmBuilder builder_(_fbb);
  builder_.add__ones(_ones);
  builder_.add__rewardCounts(_rewardCounts);
  builder_.add__rewardSums(_rewardSums);
  builder_.add__aLayerDescs(_aLayerDescs);
  builder_.add__aLayers(_aLayers);
  builder_.add__p(_p);
  return builder_.Finish();
}

inline flatbuffers::Offset<AgentSwarm> CreateAgentSwarmDirect(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ogmaneo::schemas::Predictor> _p = 0,
    const std::vector<flatbuffers::Offset<AgentSwarmLayers>> *_aLayers = nullptr,
    const std::vector<flatbuffers::Offset<AgentSwarmLayerDescs>> *_aLayerDescs = nullptr,
    const std::vector<float> *_rewardSums = nullptr,
    const std::vector<float> *_rewardCounts = nullptr,
    const std::vector<flatbuffers::Offset<ogmaneo::schemas::Image2D>> *_ones = nullptr) {
  return CreateAgentSwarm(_fbb, _p, _aLayers ? _fbb.CreateVector<flatbuffers::Offset<AgentSwarmLayers>>(*_aLayers) : 0, _aLayerDescs ? _fbb.CreateVector<flatbuffers::Offset<AgentSwarmLayerDescs>>(*_aLayerDescs) : 0, _rewardSums ? _fbb.CreateVector<float>(*_rewardSums) : 0, _rewardCounts ? _fbb.CreateVector<float>(*_rewardCounts) : 0, _ones ? _fbb.CreateVector<flatbuffers::Offset<ogmaneo::schemas::Image2D>>(*_ones) : 0);
}

}  // namespace schemas
}  // namespace ogmaneo

#endif  // FLATBUFFERS_GENERATED_AGENTSWARM_OGMANEO_SCHEMAS_H_
